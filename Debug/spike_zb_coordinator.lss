
spike_zb_coordinator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800200  00001f56  00001fea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ac7  0080020e  0080020e  00001ff8  2**0
                  ALLOC
  3 .stab         000074e8  00000000  00000000  00001ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004f0f  00000000  00000000  000094e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000e3ef  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000120  00000000  00000000  0000e400  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000006ae  00000000  00000000  0000e520  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000b4  00000000  00000000  0000ebce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000374  00000000  00000000  0000ec82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__ctors_end>
       4:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
       8:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
       c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      10:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      14:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      18:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      1c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      20:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      24:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      28:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      2c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      30:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      34:	0c 94 73 0c 	jmp	0x18e6	; 0x18e6 <__vector_13>
      38:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      3c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      40:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      44:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      48:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      4c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      50:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      54:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      58:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      5c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      60:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      64:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      68:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      6c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      70:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      74:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      78:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      7c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      80:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      84:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      88:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      8c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      90:	0c 94 5a 0d 	jmp	0x1ab4	; 0x1ab4 <__vector_36>
      94:	0c 94 3e 0d 	jmp	0x1a7c	; 0x1a7c <__vector_37>
      98:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      9c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      a0:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      a4:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      a8:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__vector_42>
      ac:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      b0:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      b4:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      b8:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      bc:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      c0:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      c4:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      c8:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      cc:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      d0:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      d4:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      d8:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      dc:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      e0:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      e4:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      e8:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      ec:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      f0:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      f4:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      f8:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
      fc:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
     100:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
     104:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
     108:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
     10c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
     110:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
     114:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
     118:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
     11c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
     120:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
     124:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
     128:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
     12c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
     130:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>

00000134 <__trampolines_start>:
     134:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <nwkRxDuplicateRejectionTimerHandler>
     138:	0c 94 66 0e 	jmp	0x1ccc	; 0x1ccc <appDataInd>
     13c:	0c 94 f9 09 	jmp	0x13f2	; 0x13f2 <nwkTxAckWaitTimerHandler>
     140:	0c 94 c8 09 	jmp	0x1390	; 0x1390 <nwkTxDelayTimerHandler>
     144:	0c 94 65 0e 	jmp	0x1cca	; 0x1cca <appDataConf>
     148:	0c 94 33 07 	jmp	0xe66	; 0xe66 <nwkRxServiceDataInd>
     14c:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <timeoutTimerHandler>
     150:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <nwkDataReqTxConf>

00000154 <__ctors_end>:
     154:	11 24       	eor	r1, r1
     156:	1f be       	out	0x3f, r1	; 63
     158:	cf ef       	ldi	r28, 0xFF	; 255
     15a:	d1 e8       	ldi	r29, 0x81	; 129
     15c:	de bf       	out	0x3e, r29	; 62
     15e:	cd bf       	out	0x3d, r28	; 61
     160:	00 e0       	ldi	r16, 0x00	; 0
     162:	0c bf       	out	0x3c, r16	; 60

00000164 <__do_copy_data>:
     164:	12 e0       	ldi	r17, 0x02	; 2
     166:	a0 e0       	ldi	r26, 0x00	; 0
     168:	b2 e0       	ldi	r27, 0x02	; 2
     16a:	e6 e5       	ldi	r30, 0x56	; 86
     16c:	ff e1       	ldi	r31, 0x1F	; 31
     16e:	00 e0       	ldi	r16, 0x00	; 0
     170:	0b bf       	out	0x3b, r16	; 59
     172:	02 c0       	rjmp	.+4      	; 0x178 <__do_copy_data+0x14>
     174:	07 90       	elpm	r0, Z+
     176:	0d 92       	st	X+, r0
     178:	ae 30       	cpi	r26, 0x0E	; 14
     17a:	b1 07       	cpc	r27, r17
     17c:	d9 f7       	brne	.-10     	; 0x174 <__do_copy_data+0x10>

0000017e <__do_clear_bss>:
     17e:	2c e0       	ldi	r18, 0x0C	; 12
     180:	ae e0       	ldi	r26, 0x0E	; 14
     182:	b2 e0       	ldi	r27, 0x02	; 2
     184:	01 c0       	rjmp	.+2      	; 0x188 <.do_clear_bss_start>

00000186 <.do_clear_bss_loop>:
     186:	1d 92       	st	X+, r1

00000188 <.do_clear_bss_start>:
     188:	a5 3d       	cpi	r26, 0xD5	; 213
     18a:	b2 07       	cpc	r27, r18
     18c:	e1 f7       	brne	.-8      	; 0x186 <.do_clear_bss_loop>
     18e:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <main>
     192:	0c 94 a9 0f 	jmp	0x1f52	; 0x1f52 <_exit>

00000196 <__bad_interrupt>:
     196:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019a <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
     19a:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <HAL_Init>
  SYS_TimerInit();
     19e:	0e 94 41 01 	call	0x282	; 0x282 <SYS_TimerInit>
  PHY_Init();
     1a2:	0e 94 55 02 	call	0x4aa	; 0x4aa <PHY_Init>
  NWK_Init();
     1a6:	0e 94 69 03 	call	0x6d2	; 0x6d2 <NWK_Init>
     1aa:	08 95       	ret

000001ac <SYS_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
     1ac:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <PHY_TaskHandler>
  NWK_TaskHandler();
     1b0:	0e 94 ed 03 	call	0x7da	; 0x7da <NWK_TaskHandler>
  SYS_TimerTaskHandler();
     1b4:	0e 94 ad 01 	call	0x35a	; 0x35a <SYS_TimerTaskHandler>
     1b8:	08 95       	ret

000001ba <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
     1ba:	0f 93       	push	r16
     1bc:	1f 93       	push	r17
     1be:	cf 93       	push	r28
     1c0:	df 93       	push	r29
     1c2:	ec 01       	movw	r28, r24
  if (timers)
     1c4:	80 91 0e 02 	lds	r24, 0x020E
     1c8:	90 91 0f 02 	lds	r25, 0x020F
     1cc:	00 97       	sbiw	r24, 0x00	; 0
     1ce:	09 f4       	brne	.+2      	; 0x1d2 <placeTimer+0x18>
     1d0:	45 c0       	rjmp	.+138    	; 0x25c <placeTimer+0xa2>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
     1d2:	4e 81       	ldd	r20, Y+6	; 0x06
     1d4:	5f 81       	ldd	r21, Y+7	; 0x07
     1d6:	68 85       	ldd	r22, Y+8	; 0x08
     1d8:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
     1da:	fc 01       	movw	r30, r24
     1dc:	02 81       	ldd	r16, Z+2	; 0x02
     1de:	13 81       	ldd	r17, Z+3	; 0x03
     1e0:	24 81       	ldd	r18, Z+4	; 0x04
     1e2:	35 81       	ldd	r19, Z+5	; 0x05
     1e4:	40 17       	cp	r20, r16
     1e6:	51 07       	cpc	r21, r17
     1e8:	62 07       	cpc	r22, r18
     1ea:	73 07       	cpc	r23, r19
     1ec:	c0 f4       	brcc	.+48     	; 0x21e <placeTimer+0x64>
     1ee:	0b c0       	rjmp	.+22     	; 0x206 <placeTimer+0x4c>
     1f0:	02 81       	ldd	r16, Z+2	; 0x02
     1f2:	13 81       	ldd	r17, Z+3	; 0x03
     1f4:	24 81       	ldd	r18, Z+4	; 0x04
     1f6:	35 81       	ldd	r19, Z+5	; 0x05
     1f8:	40 17       	cp	r20, r16
     1fa:	51 07       	cpc	r21, r17
     1fc:	62 07       	cpc	r22, r18
     1fe:	73 07       	cpc	r23, r19
     200:	28 f0       	brcs	.+10     	; 0x20c <placeTimer+0x52>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
     202:	df 01       	movw	r26, r30
     204:	0d c0       	rjmp	.+26     	; 0x220 <placeTimer+0x66>
     206:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
     208:	a0 e0       	ldi	r26, 0x00	; 0
     20a:	b0 e0       	ldi	r27, 0x00	; 0

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
      {
         t->timeout -= timeout;
     20c:	04 1b       	sub	r16, r20
     20e:	15 0b       	sbc	r17, r21
     210:	26 0b       	sbc	r18, r22
     212:	37 0b       	sbc	r19, r23
     214:	02 83       	std	Z+2, r16	; 0x02
     216:	13 83       	std	Z+3, r17	; 0x03
     218:	24 83       	std	Z+4, r18	; 0x04
     21a:	35 83       	std	Z+5, r19	; 0x05
         break;
     21c:	0a c0       	rjmp	.+20     	; 0x232 <placeTimer+0x78>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
     21e:	dc 01       	movw	r26, r24
      {
         t->timeout -= timeout;
         break;
      }
      else
        timeout -= t->timeout;
     220:	40 1b       	sub	r20, r16
     222:	51 0b       	sbc	r21, r17
     224:	62 0b       	sbc	r22, r18
     226:	73 0b       	sbc	r23, r19
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
     228:	ed 91       	ld	r30, X+
     22a:	fc 91       	ld	r31, X
     22c:	11 97       	sbiw	r26, 0x01	; 1
     22e:	30 97       	sbiw	r30, 0x00	; 0
     230:	f9 f6       	brne	.-66     	; 0x1f0 <placeTimer+0x36>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
     232:	4a 83       	std	Y+2, r20	; 0x02
     234:	5b 83       	std	Y+3, r21	; 0x03
     236:	6c 83       	std	Y+4, r22	; 0x04
     238:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
     23a:	10 97       	sbiw	r26, 0x00	; 0
     23c:	41 f0       	breq	.+16     	; 0x24e <placeTimer+0x94>
    {
      timer->next = prev->next;
     23e:	8d 91       	ld	r24, X+
     240:	9c 91       	ld	r25, X
     242:	11 97       	sbiw	r26, 0x01	; 1
     244:	99 83       	std	Y+1, r25	; 0x01
     246:	88 83       	st	Y, r24
      prev->next = timer;
     248:	cd 93       	st	X+, r28
     24a:	dc 93       	st	X, r29
     24c:	15 c0       	rjmp	.+42     	; 0x278 <placeTimer+0xbe>
    }
    else
    {
      timer->next = timers;
     24e:	99 83       	std	Y+1, r25	; 0x01
     250:	88 83       	st	Y, r24
      timers = timer;
     252:	d0 93 0f 02 	sts	0x020F, r29
     256:	c0 93 0e 02 	sts	0x020E, r28
     25a:	0e c0       	rjmp	.+28     	; 0x278 <placeTimer+0xbe>
    }
  }
  else
  {
    timer->next = NULL;
     25c:	19 82       	std	Y+1, r1	; 0x01
     25e:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
     260:	8e 81       	ldd	r24, Y+6	; 0x06
     262:	9f 81       	ldd	r25, Y+7	; 0x07
     264:	a8 85       	ldd	r26, Y+8	; 0x08
     266:	b9 85       	ldd	r27, Y+9	; 0x09
     268:	8a 83       	std	Y+2, r24	; 0x02
     26a:	9b 83       	std	Y+3, r25	; 0x03
     26c:	ac 83       	std	Y+4, r26	; 0x04
     26e:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
     270:	d0 93 0f 02 	sts	0x020F, r29
     274:	c0 93 0e 02 	sts	0x020E, r28
  }
}
     278:	df 91       	pop	r29
     27a:	cf 91       	pop	r28
     27c:	1f 91       	pop	r17
     27e:	0f 91       	pop	r16
     280:	08 95       	ret

00000282 <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
     282:	10 92 0f 02 	sts	0x020F, r1
     286:	10 92 0e 02 	sts	0x020E, r1
     28a:	08 95       	ret

0000028c <SYS_TimerStop>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
     290:	a0 91 0e 02 	lds	r26, 0x020E
     294:	b0 91 0f 02 	lds	r27, 0x020F
     298:	10 97       	sbiw	r26, 0x00	; 0
     29a:	a9 f1       	breq	.+106    	; 0x306 <SYS_TimerStop+0x7a>
  {
    if (t == timer)
     29c:	a8 17       	cp	r26, r24
     29e:	b9 07       	cpc	r27, r25
     2a0:	69 f5       	brne	.+90     	; 0x2fc <SYS_TimerStop+0x70>
     2a2:	0d c0       	rjmp	.+26     	; 0x2be <SYS_TimerStop+0x32>
     2a4:	8e 17       	cp	r24, r30
     2a6:	9f 07       	cpc	r25, r31
     2a8:	11 f0       	breq	.+4      	; 0x2ae <SYS_TimerStop+0x22>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
     2aa:	df 01       	movw	r26, r30
     2ac:	27 c0       	rjmp	.+78     	; 0x2fc <SYS_TimerStop+0x70>
  {
    if (t == timer)
    {
      if (prev)
     2ae:	10 97       	sbiw	r26, 0x00	; 0
     2b0:	29 f0       	breq	.+10     	; 0x2bc <SYS_TimerStop+0x30>
        prev->next = t->next;
     2b2:	20 81       	ld	r18, Z
     2b4:	31 81       	ldd	r19, Z+1	; 0x01
     2b6:	2d 93       	st	X+, r18
     2b8:	3c 93       	st	X, r19
     2ba:	09 c0       	rjmp	.+18     	; 0x2ce <SYS_TimerStop+0x42>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
     2bc:	df 01       	movw	r26, r30
    if (t == timer)
    {
      if (prev)
        prev->next = t->next;
      else
        timers = t->next;
     2be:	2d 91       	ld	r18, X+
     2c0:	3c 91       	ld	r19, X
     2c2:	11 97       	sbiw	r26, 0x01	; 1
     2c4:	30 93 0f 02 	sts	0x020F, r19
     2c8:	20 93 0e 02 	sts	0x020E, r18
     2cc:	fd 01       	movw	r30, r26

      if (t->next)
     2ce:	01 90       	ld	r0, Z+
     2d0:	f0 81       	ld	r31, Z
     2d2:	e0 2d       	mov	r30, r0
     2d4:	30 97       	sbiw	r30, 0x00	; 0
     2d6:	b9 f0       	breq	.+46     	; 0x306 <SYS_TimerStop+0x7a>
        t->next->timeout += timer->timeout;
     2d8:	42 81       	ldd	r20, Z+2	; 0x02
     2da:	53 81       	ldd	r21, Z+3	; 0x03
     2dc:	64 81       	ldd	r22, Z+4	; 0x04
     2de:	75 81       	ldd	r23, Z+5	; 0x05
     2e0:	ec 01       	movw	r28, r24
     2e2:	8a 81       	ldd	r24, Y+2	; 0x02
     2e4:	9b 81       	ldd	r25, Y+3	; 0x03
     2e6:	ac 81       	ldd	r26, Y+4	; 0x04
     2e8:	bd 81       	ldd	r27, Y+5	; 0x05
     2ea:	84 0f       	add	r24, r20
     2ec:	95 1f       	adc	r25, r21
     2ee:	a6 1f       	adc	r26, r22
     2f0:	b7 1f       	adc	r27, r23
     2f2:	82 83       	std	Z+2, r24	; 0x02
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	a4 83       	std	Z+4, r26	; 0x04
     2f8:	b5 83       	std	Z+5, r27	; 0x05
     2fa:	05 c0       	rjmp	.+10     	; 0x306 <SYS_TimerStop+0x7a>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
     2fc:	ed 91       	ld	r30, X+
     2fe:	fc 91       	ld	r31, X
     300:	11 97       	sbiw	r26, 0x01	; 1
     302:	30 97       	sbiw	r30, 0x00	; 0
     304:	79 f6       	brne	.-98     	; 0x2a4 <SYS_TimerStop+0x18>

      break;
    }
    prev = t;
  }
}
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	08 95       	ret

0000030c <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
     30c:	e0 91 0e 02 	lds	r30, 0x020E
     310:	f0 91 0f 02 	lds	r31, 0x020F
     314:	30 97       	sbiw	r30, 0x00	; 0
     316:	71 f0       	breq	.+28     	; 0x334 <SYS_TimerStarted+0x28>
    if (t == timer)
     318:	e8 17       	cp	r30, r24
     31a:	f9 07       	cpc	r31, r25
     31c:	21 f4       	brne	.+8      	; 0x326 <SYS_TimerStarted+0x1a>
     31e:	0c c0       	rjmp	.+24     	; 0x338 <SYS_TimerStarted+0x2c>
     320:	8e 17       	cp	r24, r30
     322:	9f 07       	cpc	r25, r31
     324:	59 f0       	breq	.+22     	; 0x33c <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
     326:	01 90       	ld	r0, Z+
     328:	f0 81       	ld	r31, Z
     32a:	e0 2d       	mov	r30, r0
     32c:	30 97       	sbiw	r30, 0x00	; 0
     32e:	c1 f7       	brne	.-16     	; 0x320 <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	08 95       	ret
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	08 95       	ret
     33c:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
     33e:	08 95       	ret

00000340 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
     340:	cf 93       	push	r28
     342:	df 93       	push	r29
     344:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
     346:	0e 94 86 01 	call	0x30c	; 0x30c <SYS_TimerStarted>
     34a:	81 11       	cpse	r24, r1
     34c:	03 c0       	rjmp	.+6      	; 0x354 <SYS_TimerStart+0x14>
    placeTimer(timer);
     34e:	ce 01       	movw	r24, r28
     350:	0e 94 dd 00 	call	0x1ba	; 0x1ba <placeTimer>
}
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	08 95       	ret

0000035a <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
     35a:	cf 92       	push	r12
     35c:	df 92       	push	r13
     35e:	ef 92       	push	r14
     360:	ff 92       	push	r15
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
     366:	80 91 b1 0c 	lds	r24, 0x0CB1
     36a:	88 23       	and	r24, r24
     36c:	09 f4       	brne	.+2      	; 0x370 <SYS_TimerTaskHandler+0x16>
     36e:	5a c0       	rjmp	.+180    	; 0x424 <SYS_TimerTaskHandler+0xca>
    return;

  ATOMIC_SECTION_ENTER
     370:	8f b7       	in	r24, 0x3f	; 63
     372:	f8 94       	cli
    cnt = halTimerIrqCount;
     374:	c0 90 b1 0c 	lds	r12, 0x0CB1
    halTimerIrqCount = 0;
     378:	10 92 b1 0c 	sts	0x0CB1, r1
  ATOMIC_SECTION_LEAVE
     37c:	8f bf       	out	0x3f, r24	; 63

  elapsed = cnt * HAL_TIMER_INTERVAL;
     37e:	d1 2c       	mov	r13, r1
     380:	e1 2c       	mov	r14, r1
     382:	f1 2c       	mov	r15, r1
     384:	cc 0c       	add	r12, r12
     386:	dd 1c       	adc	r13, r13
     388:	ee 1c       	adc	r14, r14
     38a:	ff 1c       	adc	r15, r15
     38c:	d7 01       	movw	r26, r14
     38e:	c6 01       	movw	r24, r12
     390:	88 0f       	add	r24, r24
     392:	99 1f       	adc	r25, r25
     394:	aa 1f       	adc	r26, r26
     396:	bb 1f       	adc	r27, r27
     398:	88 0f       	add	r24, r24
     39a:	99 1f       	adc	r25, r25
     39c:	aa 1f       	adc	r26, r26
     39e:	bb 1f       	adc	r27, r27
     3a0:	c8 0e       	add	r12, r24
     3a2:	d9 1e       	adc	r13, r25
     3a4:	ea 1e       	adc	r14, r26
     3a6:	fb 1e       	adc	r15, r27

  while (timers && (timers->timeout <= elapsed))
     3a8:	c0 91 0e 02 	lds	r28, 0x020E
     3ac:	d0 91 0f 02 	lds	r29, 0x020F
     3b0:	20 97       	sbiw	r28, 0x00	; 0
     3b2:	c1 f1       	breq	.+112    	; 0x424 <SYS_TimerTaskHandler+0xca>
     3b4:	4a 81       	ldd	r20, Y+2	; 0x02
     3b6:	5b 81       	ldd	r21, Y+3	; 0x03
     3b8:	6c 81       	ldd	r22, Y+4	; 0x04
     3ba:	7d 81       	ldd	r23, Y+5	; 0x05
     3bc:	c4 16       	cp	r12, r20
     3be:	d5 06       	cpc	r13, r21
     3c0:	e6 06       	cpc	r14, r22
     3c2:	f7 06       	cpc	r15, r23
     3c4:	18 f1       	brcs	.+70     	; 0x40c <SYS_TimerTaskHandler+0xb2>
  {
    SYS_Timer_t *timer = timers;

    elapsed -= timers->timeout;
     3c6:	c4 1a       	sub	r12, r20
     3c8:	d5 0a       	sbc	r13, r21
     3ca:	e6 0a       	sbc	r14, r22
     3cc:	f7 0a       	sbc	r15, r23
    timers = timers->next;
     3ce:	88 81       	ld	r24, Y
     3d0:	99 81       	ldd	r25, Y+1	; 0x01
     3d2:	90 93 0f 02 	sts	0x020F, r25
     3d6:	80 93 0e 02 	sts	0x020E, r24
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
     3da:	8a 85       	ldd	r24, Y+10	; 0x0a
     3dc:	81 30       	cpi	r24, 0x01	; 1
     3de:	19 f4       	brne	.+6      	; 0x3e6 <SYS_TimerTaskHandler+0x8c>
      placeTimer(timer);
     3e0:	ce 01       	movw	r24, r28
     3e2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <placeTimer>
    timer->handler(timer);
     3e6:	eb 85       	ldd	r30, Y+11	; 0x0b
     3e8:	fc 85       	ldd	r31, Y+12	; 0x0c
     3ea:	ce 01       	movw	r24, r28
     3ec:	19 95       	eicall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
     3ee:	c0 91 0e 02 	lds	r28, 0x020E
     3f2:	d0 91 0f 02 	lds	r29, 0x020F
     3f6:	20 97       	sbiw	r28, 0x00	; 0
     3f8:	a9 f0       	breq	.+42     	; 0x424 <SYS_TimerTaskHandler+0xca>
     3fa:	4a 81       	ldd	r20, Y+2	; 0x02
     3fc:	5b 81       	ldd	r21, Y+3	; 0x03
     3fe:	6c 81       	ldd	r22, Y+4	; 0x04
     400:	7d 81       	ldd	r23, Y+5	; 0x05
     402:	c4 16       	cp	r12, r20
     404:	d5 06       	cpc	r13, r21
     406:	e6 06       	cpc	r14, r22
     408:	f7 06       	cpc	r15, r23
     40a:	e8 f6       	brcc	.-70     	; 0x3c6 <SYS_TimerTaskHandler+0x6c>
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    timers->timeout -= elapsed;
     40c:	4a 81       	ldd	r20, Y+2	; 0x02
     40e:	5b 81       	ldd	r21, Y+3	; 0x03
     410:	6c 81       	ldd	r22, Y+4	; 0x04
     412:	7d 81       	ldd	r23, Y+5	; 0x05
     414:	4c 19       	sub	r20, r12
     416:	5d 09       	sbc	r21, r13
     418:	6e 09       	sbc	r22, r14
     41a:	7f 09       	sbc	r23, r15
     41c:	4a 83       	std	Y+2, r20	; 0x02
     41e:	5b 83       	std	Y+3, r21	; 0x03
     420:	6c 83       	std	Y+4, r22	; 0x04
     422:	7d 83       	std	Y+5, r23	; 0x05
}
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	ff 90       	pop	r15
     42a:	ef 90       	pop	r14
     42c:	df 90       	pop	r13
     42e:	cf 90       	pop	r12
     430:	08 95       	ret

00000432 <phySetChannel>:

/*************************************************************************//**
*****************************************************************************/
static void phySetChannel(void)
{
  CC_CTRL_1_REG_s.ccBand = phyBand;
     432:	90 91 10 02 	lds	r25, 0x0210
     436:	9f 70       	andi	r25, 0x0F	; 15
     438:	e4 e5       	ldi	r30, 0x54	; 84
     43a:	f1 e0       	ldi	r31, 0x01	; 1
     43c:	80 81       	ld	r24, Z
     43e:	80 7f       	andi	r24, 0xF0	; 240
     440:	89 2b       	or	r24, r25
     442:	80 83       	st	Z, r24

  if (phyBand)
     444:	80 91 10 02 	lds	r24, 0x0210
     448:	88 23       	and	r24, r24
     44a:	29 f0       	breq	.+10     	; 0x456 <phySetChannel+0x24>
    CC_CTRL_0_REG = phyChannel;
     44c:	80 91 11 02 	lds	r24, 0x0211
     450:	80 93 53 01 	sts	0x0153, r24
     454:	08 95       	ret
  else
    PHY_CC_CCA_REG_s.channel = phyChannel;
     456:	90 91 11 02 	lds	r25, 0x0211
     45a:	9f 71       	andi	r25, 0x1F	; 31
     45c:	e8 e4       	ldi	r30, 0x48	; 72
     45e:	f1 e0       	ldi	r31, 0x01	; 1
     460:	80 81       	ld	r24, Z
     462:	80 7e       	andi	r24, 0xE0	; 224
     464:	89 2b       	or	r24, r25
     466:	80 83       	st	Z, r24
     468:	08 95       	ret

0000046a <phyTrxSetState>:

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
  TRX_STATE_REG = TRX_CMD_FORCE_TRX_OFF;
     46a:	93 e0       	ldi	r25, 0x03	; 3
     46c:	90 93 42 01 	sts	0x0142, r25
  while (TRX_STATUS_TRX_OFF != TRX_STATUS_REG_s.trxStatus);
     470:	e1 e4       	ldi	r30, 0x41	; 65
     472:	f1 e0       	ldi	r31, 0x01	; 1
     474:	90 81       	ld	r25, Z
     476:	9f 71       	andi	r25, 0x1F	; 31
     478:	98 30       	cpi	r25, 0x08	; 8
     47a:	e1 f7       	brne	.-8      	; 0x474 <phyTrxSetState+0xa>

  TRX_STATE_REG = state;
     47c:	80 93 42 01 	sts	0x0142, r24
  while (state != TRX_STATUS_REG_s.trxStatus);
     480:	e1 e4       	ldi	r30, 0x41	; 65
     482:	f1 e0       	ldi	r31, 0x01	; 1
     484:	90 81       	ld	r25, Z
     486:	9f 71       	andi	r25, 0x1F	; 31
     488:	98 13       	cpse	r25, r24
     48a:	fc cf       	rjmp	.-8      	; 0x484 <phyTrxSetState+0x1a>
}
     48c:	08 95       	ret

0000048e <phySetRxState>:

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
  phyTrxSetState(TRX_CMD_TRX_OFF);
     48e:	88 e0       	ldi	r24, 0x08	; 8
     490:	0e 94 35 02 	call	0x46a	; 0x46a <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
     494:	8f ef       	ldi	r24, 0xFF	; 255
     496:	80 93 4f 01 	sts	0x014F, r24

  if (phyRxState)
     49a:	80 91 12 02 	lds	r24, 0x0212
     49e:	88 23       	and	r24, r24
     4a0:	19 f0       	breq	.+6      	; 0x4a8 <phySetRxState+0x1a>
    phyTrxSetState(TRX_CMD_RX_AACK_ON);
     4a2:	86 e1       	ldi	r24, 0x16	; 22
     4a4:	0e 94 35 02 	call	0x46a	; 0x46a <phyTrxSetState>
     4a8:	08 95       	ret

000004aa <PHY_Init>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
  TRXPR_REG_s.trxrst = 1;
     4aa:	e9 e3       	ldi	r30, 0x39	; 57
     4ac:	f1 e0       	ldi	r31, 0x01	; 1
     4ae:	80 81       	ld	r24, Z
     4b0:	81 60       	ori	r24, 0x01	; 1
     4b2:	80 83       	st	Z, r24

  phyRxState = false;
     4b4:	10 92 12 02 	sts	0x0212, r1
  phyBand = 0;
     4b8:	10 92 10 02 	sts	0x0210, r1
  phyState = PHY_STATE_IDLE;
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	80 93 93 02 	sts	0x0293, r24

  phyTrxSetState(TRX_CMD_TRX_OFF);
     4c2:	88 e0       	ldi	r24, 0x08	; 8
     4c4:	0e 94 35 02 	call	0x46a	; 0x46a <phyTrxSetState>

  TRX_RPC_REG = TRX_RPC_REG_VALUE;
     4c8:	8b ee       	ldi	r24, 0xEB	; 235
     4ca:	80 93 56 01 	sts	0x0156, r24

  TRX_CTRL_2_REG_s.rxSafeMode = 1;
     4ce:	ec e4       	ldi	r30, 0x4C	; 76
     4d0:	f1 e0       	ldi	r31, 0x01	; 1
     4d2:	80 81       	ld	r24, Z
     4d4:	80 68       	ori	r24, 0x80	; 128
     4d6:	80 83       	st	Z, r24
     4d8:	08 95       	ret

000004da <PHY_SetRxState>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetRxState(bool rx)
{
  phyRxState = rx;
     4da:	80 93 12 02 	sts	0x0212, r24
  phySetRxState();
     4de:	0e 94 47 02 	call	0x48e	; 0x48e <phySetRxState>
     4e2:	08 95       	ret

000004e4 <PHY_SetChannel>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
  phyChannel = channel;
     4e4:	80 93 11 02 	sts	0x0211, r24
  phySetChannel();
     4e8:	0e 94 19 02 	call	0x432	; 0x432 <phySetChannel>
     4ec:	08 95       	ret

000004ee <PHY_SetBand>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetBand(uint8_t band)
{
  phyBand = band;
     4ee:	80 93 10 02 	sts	0x0210, r24
  phySetChannel();
     4f2:	0e 94 19 02 	call	0x432	; 0x432 <phySetChannel>
     4f6:	08 95       	ret

000004f8 <PHY_SetPanId>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_SetPanId(uint16_t panId)
{
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	1f 92       	push	r1
     4fe:	1f 92       	push	r1
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62
     504:	9a 83       	std	Y+2, r25	; 0x02
     506:	89 83       	std	Y+1, r24	; 0x01
  uint8_t *d = (uint8_t *)&panId;

  PAN_ID_0_REG = d[0];
     508:	80 93 62 01 	sts	0x0162, r24
  PAN_ID_1_REG = d[1];
     50c:	8a 81       	ldd	r24, Y+2	; 0x02
     50e:	80 93 63 01 	sts	0x0163, r24
}
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	08 95       	ret

0000051c <PHY_SetShortAddr>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetShortAddr(uint16_t addr)
{
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
     520:	1f 92       	push	r1
     522:	1f 92       	push	r1
     524:	cd b7       	in	r28, 0x3d	; 61
     526:	de b7       	in	r29, 0x3e	; 62
     528:	9a 83       	std	Y+2, r25	; 0x02
     52a:	89 83       	std	Y+1, r24	; 0x01
  uint8_t *d = (uint8_t *)&addr;

  SHORT_ADDR_0_REG = d[0];
     52c:	80 93 60 01 	sts	0x0160, r24
  SHORT_ADDR_1_REG = d[1];
     530:	8a 81       	ldd	r24, Y+2	; 0x02
     532:	80 93 61 01 	sts	0x0161, r24

#ifndef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
  CSMA_SEED_0_REG = d[0] + d[1];
     536:	9a 81       	ldd	r25, Y+2	; 0x02
     538:	89 81       	ldd	r24, Y+1	; 0x01
     53a:	89 0f       	add	r24, r25
     53c:	80 93 6d 01 	sts	0x016D, r24
#endif
}
     540:	0f 90       	pop	r0
     542:	0f 90       	pop	r0
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	08 95       	ret

0000054a <PHY_SetTxPower>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetTxPower(uint8_t txPower)
{
  PHY_TX_PWR_REG_s.txPwr = txPower;
     54a:	8f 70       	andi	r24, 0x0F	; 15
     54c:	e5 e4       	ldi	r30, 0x45	; 69
     54e:	f1 e0       	ldi	r31, 0x01	; 1
     550:	90 81       	ld	r25, Z
     552:	90 7f       	andi	r25, 0xF0	; 240
     554:	89 2b       	or	r24, r25
     556:	80 83       	st	Z, r24
     558:	08 95       	ret

0000055a <PHY_Sleep>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Sleep(void)
{
  phyTrxSetState(TRX_CMD_TRX_OFF);
     55a:	88 e0       	ldi	r24, 0x08	; 8
     55c:	0e 94 35 02 	call	0x46a	; 0x46a <phyTrxSetState>
  TRXPR_REG_s.slptr = 1;
     560:	e9 e3       	ldi	r30, 0x39	; 57
     562:	f1 e0       	ldi	r31, 0x01	; 1
     564:	80 81       	ld	r24, Z
     566:	82 60       	ori	r24, 0x02	; 2
     568:	80 83       	st	Z, r24
  phyState = PHY_STATE_SLEEP;
     56a:	82 e0       	ldi	r24, 0x02	; 2
     56c:	80 93 93 02 	sts	0x0293, r24
     570:	08 95       	ret

00000572 <PHY_Wakeup>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
     572:	e9 e3       	ldi	r30, 0x39	; 57
     574:	f1 e0       	ldi	r31, 0x01	; 1
     576:	80 81       	ld	r24, Z
     578:	8d 7f       	andi	r24, 0xFD	; 253
     57a:	80 83       	st	Z, r24
  phySetRxState();
     57c:	0e 94 47 02 	call	0x48e	; 0x48e <phySetRxState>
  phyState = PHY_STATE_IDLE;
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	80 93 93 02 	sts	0x0293, r24
     586:	08 95       	ret

00000588 <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
     588:	1f 93       	push	r17
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	d8 2f       	mov	r29, r24
     590:	19 2f       	mov	r17, r25
     592:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
     594:	89 e1       	ldi	r24, 0x19	; 25
     596:	0e 94 35 02 	call	0x46a	; 0x46a <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
     59a:	8f ef       	ldi	r24, 0xFF	; 255
     59c:	80 93 4f 01 	sts	0x014F, r24

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
     5a0:	82 e0       	ldi	r24, 0x02	; 2
     5a2:	8c 0f       	add	r24, r28
     5a4:	80 93 80 01 	sts	0x0180, r24
  for (uint8_t i = 0; i < size; i++)
     5a8:	cc 23       	and	r28, r28
     5aa:	59 f0       	breq	.+22     	; 0x5c2 <PHY_DataReq+0x3a>
     5ac:	2d 2f       	mov	r18, r29
     5ae:	ed 2f       	mov	r30, r29
     5b0:	f1 2f       	mov	r31, r17
     5b2:	a1 e8       	ldi	r26, 0x81	; 129
     5b4:	b1 e0       	ldi	r27, 0x01	; 1
    TRX_FRAME_BUFFER(i+1) = data[i];
     5b6:	81 91       	ld	r24, Z+
     5b8:	8d 93       	st	X+, r24
     5ba:	8e 2f       	mov	r24, r30
     5bc:	82 1b       	sub	r24, r18
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
     5be:	8c 17       	cp	r24, r28
     5c0:	d0 f3       	brcs	.-12     	; 0x5b6 <PHY_DataReq+0x2e>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
     5c2:	83 e0       	ldi	r24, 0x03	; 3
     5c4:	80 93 93 02 	sts	0x0293, r24
  TRX_STATE_REG = TRX_CMD_TX_START;
     5c8:	82 e0       	ldi	r24, 0x02	; 2
     5ca:	80 93 42 01 	sts	0x0142, r24
}
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	1f 91       	pop	r17
     5d4:	08 95       	ret

000005d6 <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
     5d6:	1f 93       	push	r17
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
     5dc:	00 d0       	rcall	.+0      	; 0x5de <PHY_TaskHandler+0x8>
     5de:	1f 92       	push	r1
     5e0:	1f 92       	push	r1
     5e2:	cd b7       	in	r28, 0x3d	; 61
     5e4:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
     5e6:	80 91 93 02 	lds	r24, 0x0293
     5ea:	82 30       	cpi	r24, 0x02	; 2
     5ec:	09 f4       	brne	.+2      	; 0x5f0 <PHY_TaskHandler+0x1a>
     5ee:	68 c0       	rjmp	.+208    	; 0x6c0 <PHY_TaskHandler+0xea>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
     5f0:	80 91 4f 01 	lds	r24, 0x014F
     5f4:	83 ff       	sbrs	r24, 3
     5f6:	3f c0       	rjmp	.+126    	; 0x676 <PHY_TaskHandler+0xa0>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
     5f8:	a0 91 7b 01 	lds	r26, 0x017B

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
     5fc:	4a 2f       	mov	r20, r26
     5fe:	50 e0       	ldi	r21, 0x00	; 0
     600:	9a 01       	movw	r18, r20
     602:	2f 5f       	subi	r18, 0xFF	; 255
     604:	3f 4f       	sbci	r19, 0xFF	; 255
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	60 e0       	ldi	r22, 0x00	; 0
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
     60c:	fc 01       	movw	r30, r24
     60e:	e0 58       	subi	r30, 0x80	; 128
     610:	fe 4f       	sbci	r31, 0xFE	; 254
     612:	70 81       	ld	r23, Z
     614:	fc 01       	movw	r30, r24
     616:	ed 5e       	subi	r30, 0xED	; 237
     618:	fd 4f       	sbci	r31, 0xFD	; 253
     61a:	70 83       	st	Z, r23
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
     61c:	6f 5f       	subi	r22, 0xFF	; 255
     61e:	86 2f       	mov	r24, r22
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	82 17       	cp	r24, r18
     624:	93 07       	cpc	r25, r19
     626:	94 f3       	brlt	.-28     	; 0x60c <PHY_TaskHandler+0x36>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
     628:	83 e1       	ldi	r24, 0x13	; 19
     62a:	92 e0       	ldi	r25, 0x02	; 2
     62c:	9a 83       	std	Y+2, r25	; 0x02
     62e:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
     630:	a2 50       	subi	r26, 0x02	; 2
     632:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
     634:	fa 01       	movw	r30, r20
     636:	ed 5e       	subi	r30, 0xED	; 237
     638:	fd 4f       	sbci	r31, 0xFD	; 253
     63a:	80 81       	ld	r24, Z
     63c:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
     63e:	80 91 47 01 	lds	r24, 0x0147
     642:	8a 55       	subi	r24, 0x5A	; 90
     644:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
     646:	ce 01       	movw	r24, r28
     648:	01 96       	adiw	r24, 0x01	; 1
     64a:	0e 94 84 07 	call	0xf08	; 0xf08 <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
     64e:	e1 e4       	ldi	r30, 0x41	; 65
     650:	f1 e0       	ldi	r31, 0x01	; 1
     652:	80 81       	ld	r24, Z
     654:	8f 71       	andi	r24, 0x1F	; 31
     656:	86 31       	cpi	r24, 0x16	; 22
     658:	e1 f7       	brne	.-8      	; 0x652 <PHY_TaskHandler+0x7c>

    IRQ_STATUS_REG_s.rxEnd = 1;
     65a:	ef e4       	ldi	r30, 0x4F	; 79
     65c:	f1 e0       	ldi	r31, 0x01	; 1
     65e:	80 81       	ld	r24, Z
     660:	88 60       	ori	r24, 0x08	; 8
     662:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
     664:	ec e4       	ldi	r30, 0x4C	; 76
     666:	f1 e0       	ldi	r31, 0x01	; 1
     668:	80 81       	ld	r24, Z
     66a:	8f 77       	andi	r24, 0x7F	; 127
     66c:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
     66e:	80 81       	ld	r24, Z
     670:	80 68       	ori	r24, 0x80	; 128
     672:	80 83       	st	Z, r24
     674:	25 c0       	rjmp	.+74     	; 0x6c0 <PHY_TaskHandler+0xea>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
     676:	80 91 4f 01 	lds	r24, 0x014F
     67a:	86 ff       	sbrs	r24, 6
     67c:	21 c0       	rjmp	.+66     	; 0x6c0 <PHY_TaskHandler+0xea>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
     67e:	80 91 41 01 	lds	r24, 0x0141
     682:	8f 71       	andi	r24, 0x1F	; 31
     684:	89 31       	cpi	r24, 0x19	; 25
     686:	b9 f4       	brne	.+46     	; 0x6b6 <PHY_TaskHandler+0xe0>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
     688:	10 91 42 01 	lds	r17, 0x0142
     68c:	12 95       	swap	r17
     68e:	16 95       	lsr	r17
     690:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
     692:	49 f0       	breq	.+18     	; 0x6a6 <PHY_TaskHandler+0xd0>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
     694:	13 30       	cpi	r17, 0x03	; 3
     696:	21 f0       	breq	.+8      	; 0x6a0 <PHY_TaskHandler+0xca>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
     698:	15 30       	cpi	r17, 0x05	; 5
     69a:	21 f4       	brne	.+8      	; 0x6a4 <PHY_TaskHandler+0xce>
        status = PHY_STATUS_NO_ACK;
     69c:	12 e0       	ldi	r17, 0x02	; 2
     69e:	03 c0       	rjmp	.+6      	; 0x6a6 <PHY_TaskHandler+0xd0>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
     6a0:	11 e0       	ldi	r17, 0x01	; 1
     6a2:	01 c0       	rjmp	.+2      	; 0x6a6 <PHY_TaskHandler+0xd0>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;
     6a4:	13 e0       	ldi	r17, 0x03	; 3

      phySetRxState();
     6a6:	0e 94 47 02 	call	0x48e	; 0x48e <phySetRxState>
      phyState = PHY_STATE_IDLE;
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	80 93 93 02 	sts	0x0293, r24

      PHY_DataConf(status);
     6b0:	81 2f       	mov	r24, r17
     6b2:	0e 94 25 0b 	call	0x164a	; 0x164a <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
     6b6:	ef e4       	ldi	r30, 0x4F	; 79
     6b8:	f1 e0       	ldi	r31, 0x01	; 1
     6ba:	80 81       	ld	r24, Z
     6bc:	80 64       	ori	r24, 0x40	; 64
     6be:	80 83       	st	Z, r24
  }
}
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	0f 90       	pop	r0
     6c6:	0f 90       	pop	r0
     6c8:	0f 90       	pop	r0
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	1f 91       	pop	r17
     6d0:	08 95       	ret

000006d2 <NWK_Init>:
/*************************************************************************//**
  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
  nwkIb.nwkSeqNum = 0;
     6d2:	10 92 8d 0c 	sts	0x0C8D, r1
  nwkIb.macSeqNum = 0;
     6d6:	10 92 8e 0c 	sts	0x0C8E, r1
  nwkIb.addr = 0;
     6da:	10 92 8a 0c 	sts	0x0C8A, r1
     6de:	10 92 89 0c 	sts	0x0C89, r1
  nwkIb.lock = 0;
     6e2:	10 92 b0 0c 	sts	0x0CB0, r1
     6e6:	10 92 af 0c 	sts	0x0CAF, r1
     6ea:	ef e8       	ldi	r30, 0x8F	; 143
     6ec:	fc e0       	ldi	r31, 0x0C	; 12
     6ee:	8f ea       	ldi	r24, 0xAF	; 175
     6f0:	9c e0       	ldi	r25, 0x0C	; 12

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
    nwkIb.endpoint[i] = NULL;
     6f2:	11 92       	st	Z+, r1
     6f4:	11 92       	st	Z+, r1
  nwkIb.nwkSeqNum = 0;
  nwkIb.macSeqNum = 0;
  nwkIb.addr = 0;
  nwkIb.lock = 0;

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
     6f6:	e8 17       	cp	r30, r24
     6f8:	f9 07       	cpc	r31, r25
     6fa:	d9 f7       	brne	.-10     	; 0x6f2 <NWK_Init+0x20>
    nwkIb.endpoint[i] = NULL;

  nwkTxInit();
     6fc:	0e 94 32 0a 	call	0x1464	; 0x1464 <nwkTxInit>
  nwkRxInit();
     700:	0e 94 61 07 	call	0xec2	; 0xec2 <nwkRxInit>
  nwkFrameInit();
     704:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <nwkFrameInit>
  nwkDataReqInit();
     708:	0e 94 18 04 	call	0x830	; 0x830 <nwkDataReqInit>

#ifdef NWK_ENABLE_ROUTING
  nwkRouteInit();
     70c:	0e 94 57 05 	call	0xaae	; 0xaae <nwkRouteInit>
     710:	08 95       	ret

00000712 <NWK_SetAddr>:
  @brief Sets network address of the node
  @param[in] addr Adddress to set
*****************************************************************************/
void NWK_SetAddr(uint16_t addr)
{
  nwkIb.addr = addr;
     712:	90 93 8a 0c 	sts	0x0C8A, r25
     716:	80 93 89 0c 	sts	0x0C89, r24
  PHY_SetShortAddr(addr);
     71a:	0e 94 8e 02 	call	0x51c	; 0x51c <PHY_SetShortAddr>
     71e:	08 95       	ret

00000720 <NWK_SetPanId>:
  @brief Sets network identifier (PAN) of the node
  @param[in] panId PAN ID to set
*****************************************************************************/
void NWK_SetPanId(uint16_t panId)
{
  nwkIb.panId = panId;
     720:	90 93 8c 0c 	sts	0x0C8C, r25
     724:	80 93 8b 0c 	sts	0x0C8B, r24
  PHY_SetPanId(panId);
     728:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <PHY_SetPanId>
     72c:	08 95       	ret

0000072e <NWK_OpenEndpoint>:
  @param[in] id Endpoint index (1-15)
  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
  nwkIb.endpoint[id] = handler;
     72e:	e8 2f       	mov	r30, r24
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	ee 0f       	add	r30, r30
     734:	ff 1f       	adc	r31, r31
     736:	e1 57       	subi	r30, 0x71	; 113
     738:	f3 4f       	sbci	r31, 0xF3	; 243
     73a:	71 83       	std	Z+1, r23	; 0x01
     73c:	60 83       	st	Z, r22
     73e:	08 95       	ret

00000740 <NWK_Busy>:
  @brief Checks if network layer is ready for sleep
  @return @c true if network layer is ready for sleep or @c false otherwise
*****************************************************************************/
bool NWK_Busy(void)
{
  return nwkIb.lock > 0;
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	20 91 af 0c 	lds	r18, 0x0CAF
     746:	30 91 b0 0c 	lds	r19, 0x0CB0
     74a:	23 2b       	or	r18, r19
     74c:	09 f4       	brne	.+2      	; 0x750 <NWK_Busy+0x10>
     74e:	80 e0       	ldi	r24, 0x00	; 0
}
     750:	08 95       	ret

00000752 <NWK_Lock>:
/*************************************************************************//**
  @brief Increases the lock counter and sets a busy state
*****************************************************************************/
void NWK_Lock(void)
{
  nwkIb.lock++;
     752:	ef ea       	ldi	r30, 0xAF	; 175
     754:	fc e0       	ldi	r31, 0x0C	; 12
     756:	80 81       	ld	r24, Z
     758:	91 81       	ldd	r25, Z+1	; 0x01
     75a:	01 96       	adiw	r24, 0x01	; 1
     75c:	91 83       	std	Z+1, r25	; 0x01
     75e:	80 83       	st	Z, r24
     760:	08 95       	ret

00000762 <NWK_Unlock>:
/*************************************************************************//**
  @brief Decreases the lock counter and sets a free state if counter reaches 0
*****************************************************************************/
void NWK_Unlock(void)
{
  nwkIb.lock--;
     762:	ef ea       	ldi	r30, 0xAF	; 175
     764:	fc e0       	ldi	r31, 0x0C	; 12
     766:	80 81       	ld	r24, Z
     768:	91 81       	ldd	r25, Z+1	; 0x01
     76a:	01 97       	sbiw	r24, 0x01	; 1
     76c:	91 83       	std	Z+1, r25	; 0x01
     76e:	80 83       	st	Z, r24
     770:	08 95       	ret

00000772 <NWK_SleepReq>:
/*************************************************************************//**
  @brief Puts network layer to a sleeping state
*****************************************************************************/
void NWK_SleepReq(void)
{
  PHY_Sleep();
     772:	0e 94 ad 02 	call	0x55a	; 0x55a <PHY_Sleep>
     776:	08 95       	ret

00000778 <NWK_WakeupReq>:
/*************************************************************************//**
  @brief Puts network layer to an active state
*****************************************************************************/
void NWK_WakeupReq(void)
{
  PHY_Wakeup();
     778:	0e 94 b9 02 	call	0x572	; 0x572 <PHY_Wakeup>
     77c:	08 95       	ret

0000077e <NWK_LinearizeLqi>:
  @brief Calculates linearized value for the given value of the LQI
  @param[in] lqi LQI value as provided by the transceiver
  @return linearized value directly proportional to the probability of delivery
*****************************************************************************/
uint8_t NWK_LinearizeLqi(uint8_t lqi)
{
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
     782:	cd b7       	in	r28, 0x3d	; 61
     784:	de b7       	in	r29, 0x3e	; 62
     786:	29 97       	sbiw	r28, 0x09	; 9
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	f8 94       	cli
     78c:	de bf       	out	0x3e, r29	; 62
     78e:	0f be       	out	0x3f, r0	; 63
     790:	cd bf       	out	0x3d, r28	; 61
  const uint8_t val[] = { 3, 8, 26, 64, 128, 190, 230, 247, 252 };
     792:	99 e0       	ldi	r25, 0x09	; 9
     794:	e4 e0       	ldi	r30, 0x04	; 4
     796:	f2 e0       	ldi	r31, 0x02	; 2
     798:	de 01       	movw	r26, r28
     79a:	11 96       	adiw	r26, 0x01	; 1
     79c:	01 90       	ld	r0, Z+
     79e:	0d 92       	st	X+, r0
     7a0:	9a 95       	dec	r25
     7a2:	e1 f7       	brne	.-8      	; 0x79c <NWK_LinearizeLqi+0x1e>
  uint8_t cl = 25;

  for (uint8_t i = 0; i < sizeof(val); i++)
  {
    if (lqi < cl)
     7a4:	89 31       	cpi	r24, 0x19	; 25
     7a6:	28 f0       	brcs	.+10     	; 0x7b2 <NWK_LinearizeLqi+0x34>
uint8_t NWK_LinearizeLqi(uint8_t lqi)
{
  const uint8_t val[] = { 3, 8, 26, 64, 128, 190, 230, 247, 252 };
  uint8_t cl = 25;

  for (uint8_t i = 0; i < sizeof(val); i++)
     7a8:	21 e0       	ldi	r18, 0x01	; 1
  {
    if (lqi < cl)
      return val[i];
    cl += 25;
     7aa:	92 e3       	ldi	r25, 0x32	; 50
  const uint8_t val[] = { 3, 8, 26, 64, 128, 190, 230, 247, 252 };
  uint8_t cl = 25;

  for (uint8_t i = 0; i < sizeof(val); i++)
  {
    if (lqi < cl)
     7ac:	89 17       	cp	r24, r25
     7ae:	38 f4       	brcc	.+14     	; 0x7be <NWK_LinearizeLqi+0x40>
     7b0:	01 c0       	rjmp	.+2      	; 0x7b4 <NWK_LinearizeLqi+0x36>
uint8_t NWK_LinearizeLqi(uint8_t lqi)
{
  const uint8_t val[] = { 3, 8, 26, 64, 128, 190, 230, 247, 252 };
  uint8_t cl = 25;

  for (uint8_t i = 0; i < sizeof(val); i++)
     7b2:	20 e0       	ldi	r18, 0x00	; 0
  {
    if (lqi < cl)
      return val[i];
     7b4:	fe 01       	movw	r30, r28
     7b6:	e2 0f       	add	r30, r18
     7b8:	f1 1d       	adc	r31, r1
     7ba:	81 81       	ldd	r24, Z+1	; 0x01
     7bc:	05 c0       	rjmp	.+10     	; 0x7c8 <NWK_LinearizeLqi+0x4a>
    cl += 25;
     7be:	97 5e       	subi	r25, 0xE7	; 231
uint8_t NWK_LinearizeLqi(uint8_t lqi)
{
  const uint8_t val[] = { 3, 8, 26, 64, 128, 190, 230, 247, 252 };
  uint8_t cl = 25;

  for (uint8_t i = 0; i < sizeof(val); i++)
     7c0:	2f 5f       	subi	r18, 0xFF	; 255
     7c2:	9a 3f       	cpi	r25, 0xFA	; 250
     7c4:	99 f7       	brne	.-26     	; 0x7ac <NWK_LinearizeLqi+0x2e>
    if (lqi < cl)
      return val[i];
    cl += 25;
  }

  return 255;
     7c6:	8f ef       	ldi	r24, 0xFF	; 255
}
     7c8:	29 96       	adiw	r28, 0x09	; 9
     7ca:	0f b6       	in	r0, 0x3f	; 63
     7cc:	f8 94       	cli
     7ce:	de bf       	out	0x3e, r29	; 62
     7d0:	0f be       	out	0x3f, r0	; 63
     7d2:	cd bf       	out	0x3d, r28	; 61
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	08 95       	ret

000007da <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
     7da:	0e 94 b0 07 	call	0xf60	; 0xf60 <nwkRxTaskHandler>
  nwkTxTaskHandler();
     7de:	0e 94 48 0b 	call	0x1690	; 0x1690 <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
     7e2:	0e 94 3e 04 	call	0x87c	; 0x87c <nwkDataReqTaskHandler>
     7e6:	08 95       	ret

000007e8 <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     7e8:	e0 91 94 02 	lds	r30, 0x0294
     7ec:	f0 91 95 02 	lds	r31, 0x0295
     7f0:	30 97       	sbiw	r30, 0x00	; 0
     7f2:	d9 f0       	breq	.+54     	; 0x82a <nwkDataReqTxConf+0x42>
  {
    if (req->frame == frame)
     7f4:	22 81       	ldd	r18, Z+2	; 0x02
     7f6:	33 81       	ldd	r19, Z+3	; 0x03
     7f8:	28 17       	cp	r18, r24
     7fa:	39 07       	cpc	r19, r25
     7fc:	89 f4       	brne	.+34     	; 0x820 <nwkDataReqTxConf+0x38>
     7fe:	05 c0       	rjmp	.+10     	; 0x80a <nwkDataReqTxConf+0x22>
     800:	22 81       	ldd	r18, Z+2	; 0x02
     802:	33 81       	ldd	r19, Z+3	; 0x03
     804:	28 17       	cp	r18, r24
     806:	39 07       	cpc	r19, r25
     808:	59 f4       	brne	.+22     	; 0x820 <nwkDataReqTxConf+0x38>
    {
      req->status = frame->tx.status;
     80a:	dc 01       	movw	r26, r24
     80c:	ad 57       	subi	r26, 0x7D	; 125
     80e:	bf 4f       	sbci	r27, 0xFF	; 255
     810:	2c 91       	ld	r18, X
     812:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
     814:	13 96       	adiw	r26, 0x03	; 3
     816:	2c 91       	ld	r18, X
     818:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
     81a:	22 e0       	ldi	r18, 0x02	; 2
     81c:	24 83       	std	Z+4, r18	; 0x04
      break;
     81e:	05 c0       	rjmp	.+10     	; 0x82a <nwkDataReqTxConf+0x42>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     820:	01 90       	ld	r0, Z+
     822:	f0 81       	ld	r31, Z
     824:	e0 2d       	mov	r30, r0
     826:	30 97       	sbiw	r30, 0x00	; 0
     828:	59 f7       	brne	.-42     	; 0x800 <nwkDataReqTxConf+0x18>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
     82a:	0e 94 16 05 	call	0xa2c	; 0xa2c <nwkFrameFree>
     82e:	08 95       	ret

00000830 <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
     830:	10 92 95 02 	sts	0x0295, r1
     834:	10 92 94 02 	sts	0x0294, r1
     838:	08 95       	ret

0000083a <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
     83a:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
     83c:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
     83e:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
     840:	13 82       	std	Z+3, r1	; 0x03
     842:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
     844:	af ea       	ldi	r26, 0xAF	; 175
     846:	bc e0       	ldi	r27, 0x0C	; 12
     848:	8d 91       	ld	r24, X+
     84a:	9c 91       	ld	r25, X
     84c:	11 97       	sbiw	r26, 0x01	; 1
     84e:	01 96       	adiw	r24, 0x01	; 1
     850:	8d 93       	st	X+, r24
     852:	9c 93       	st	X, r25

  if (NULL == nwkDataReqQueue)
     854:	80 91 94 02 	lds	r24, 0x0294
     858:	90 91 95 02 	lds	r25, 0x0295
     85c:	00 97       	sbiw	r24, 0x00	; 0
     85e:	39 f4       	brne	.+14     	; 0x86e <NWK_DataReq+0x34>
  {
    req->next = NULL;
     860:	11 82       	std	Z+1, r1	; 0x01
     862:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
     864:	f0 93 95 02 	sts	0x0295, r31
     868:	e0 93 94 02 	sts	0x0294, r30
     86c:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
     86e:	91 83       	std	Z+1, r25	; 0x01
     870:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
     872:	f0 93 95 02 	sts	0x0295, r31
     876:	e0 93 94 02 	sts	0x0294, r30
     87a:	08 95       	ret

0000087c <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
     87c:	0f 93       	push	r16
     87e:	1f 93       	push	r17
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     884:	e0 91 94 02 	lds	r30, 0x0294
     888:	f0 91 95 02 	lds	r31, 0x0295
     88c:	30 97       	sbiw	r30, 0x00	; 0
     88e:	09 f4       	brne	.+2      	; 0x892 <nwkDataReqTaskHandler+0x16>
     890:	86 c0       	rjmp	.+268    	; 0x99e <nwkDataReqTaskHandler+0x122>
     892:	ef 01       	movw	r28, r30
  {
    switch (req->state)
     894:	8c 81       	ldd	r24, Y+4	; 0x04
     896:	88 23       	and	r24, r24
     898:	21 f0       	breq	.+8      	; 0x8a2 <nwkDataReqTaskHandler+0x26>
     89a:	82 30       	cpi	r24, 0x02	; 2
     89c:	09 f4       	brne	.+2      	; 0x8a0 <nwkDataReqTaskHandler+0x24>
     89e:	58 c0       	rjmp	.+176    	; 0x950 <nwkDataReqTaskHandler+0xd4>
     8a0:	78 c0       	rjmp	.+240    	; 0x992 <nwkDataReqTaskHandler+0x116>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
     8a2:	0e 94 df 04 	call	0x9be	; 0x9be <nwkFrameAlloc>
     8a6:	8c 01       	movw	r16, r24
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	21 f4       	brne	.+8      	; 0x8b4 <nwkDataReqTaskHandler+0x38>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
     8b0:	8f 87       	std	Y+15, r24	; 0x0f
     8b2:	75 c0       	rjmp	.+234    	; 0x99e <nwkDataReqTaskHandler+0x122>
    return;
  }

  req->frame = frame;
     8b4:	9b 83       	std	Y+3, r25	; 0x03
     8b6:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
     8bc:	f8 01       	movw	r30, r16
     8be:	e9 57       	subi	r30, 0x79	; 121
     8c0:	ff 4f       	sbci	r31, 0xFF	; 255
     8c2:	84 ef       	ldi	r24, 0xF4	; 244
     8c4:	93 e0       	ldi	r25, 0x03	; 3
     8c6:	91 83       	std	Z+1, r25	; 0x01
     8c8:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
     8ca:	31 97       	sbiw	r30, 0x01	; 1
     8cc:	89 85       	ldd	r24, Y+9	; 0x09
     8ce:	82 fb       	bst	r24, 2
     8d0:	88 27       	eor	r24, r24
     8d2:	80 f9       	bld	r24, 0
     8d4:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
     8d6:	99 85       	ldd	r25, Y+9	; 0x09
     8d8:	f8 01       	movw	r30, r16
     8da:	83 85       	ldd	r24, Z+11	; 0x0b
     8dc:	90 fb       	bst	r25, 0
     8de:	80 f9       	bld	r24, 0
     8e0:	83 87       	std	Z+11, r24	; 0x0b
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
     8e2:	99 85       	ldd	r25, Y+9	; 0x09
     8e4:	93 fb       	bst	r25, 3
     8e6:	99 27       	eor	r25, r25
     8e8:	90 f9       	bld	r25, 0
     8ea:	90 fb       	bst	r25, 0
     8ec:	82 f9       	bld	r24, 2
     8ee:	83 87       	std	Z+11, r24	; 0x0b
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     8f0:	ed e8       	ldi	r30, 0x8D	; 141
     8f2:	fc e0       	ldi	r31, 0x0C	; 12
     8f4:	80 81       	ld	r24, Z
     8f6:	8f 5f       	subi	r24, 0xFF	; 255
     8f8:	80 83       	st	Z, r24
     8fa:	f8 01       	movw	r30, r16
     8fc:	84 87       	std	Z+12, r24	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
     8fe:	80 91 89 0c 	lds	r24, 0x0C89
     902:	90 91 8a 0c 	lds	r25, 0x0C8A
     906:	96 87       	std	Z+14, r25	; 0x0e
     908:	85 87       	std	Z+13, r24	; 0x0d
  frame->header.nwkDstAddr = req->dstAddr;
     90a:	8d 81       	ldd	r24, Y+5	; 0x05
     90c:	9e 81       	ldd	r25, Y+6	; 0x06
     90e:	90 8b       	std	Z+16, r25	; 0x10
     910:	87 87       	std	Z+15, r24	; 0x0f
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
     912:	98 85       	ldd	r25, Y+8	; 0x08
     914:	9f 70       	andi	r25, 0x0F	; 15
     916:	81 89       	ldd	r24, Z+17	; 0x11
     918:	80 7f       	andi	r24, 0xF0	; 240
     91a:	89 2b       	or	r24, r25
     91c:	81 8b       	std	Z+17, r24	; 0x11
  frame->header.nwkDstEndpoint = req->dstEndpoint;
     91e:	9f 81       	ldd	r25, Y+7	; 0x07
     920:	92 95       	swap	r25
     922:	90 7f       	andi	r25, 0xF0	; 240
     924:	8f 70       	andi	r24, 0x0F	; 15
     926:	89 2b       	or	r24, r25
     928:	81 8b       	std	Z+17, r24	; 0x11

  memcpy(frame->payload, req->data, req->size);
     92a:	ef 57       	subi	r30, 0x7F	; 127
     92c:	ff 4f       	sbci	r31, 0xFF	; 255
     92e:	4c 85       	ldd	r20, Y+12	; 0x0c
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	6a 85       	ldd	r22, Y+10	; 0x0a
     934:	7b 85       	ldd	r23, Y+11	; 0x0b
     936:	80 81       	ld	r24, Z
     938:	91 81       	ldd	r25, Z+1	; 0x01
     93a:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <memcpy>
  frame->size += req->size;
     93e:	f8 01       	movw	r30, r16
     940:	91 81       	ldd	r25, Z+1	; 0x01
     942:	8c 85       	ldd	r24, Y+12	; 0x0c
     944:	89 0f       	add	r24, r25
     946:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(frame);
     948:	c8 01       	movw	r24, r16
     94a:	0e 94 5f 0a 	call	0x14be	; 0x14be <nwkTxFrame>
     94e:	27 c0       	rjmp	.+78     	; 0x99e <nwkDataReqTaskHandler+0x122>
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
     950:	ce 17       	cp	r28, r30
     952:	df 07       	cpc	r29, r31
     954:	39 f4       	brne	.+14     	; 0x964 <nwkDataReqTaskHandler+0xe8>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
     956:	88 81       	ld	r24, Y
     958:	99 81       	ldd	r25, Y+1	; 0x01
     95a:	90 93 95 02 	sts	0x0295, r25
     95e:	80 93 94 02 	sts	0x0294, r24
     962:	0b c0       	rjmp	.+22     	; 0x97a <nwkDataReqTaskHandler+0xfe>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
     964:	80 81       	ld	r24, Z
     966:	91 81       	ldd	r25, Z+1	; 0x01
     968:	c8 17       	cp	r28, r24
     96a:	d9 07       	cpc	r29, r25
     96c:	11 f0       	breq	.+4      	; 0x972 <nwkDataReqTaskHandler+0xf6>
      prev = prev->next;
     96e:	fc 01       	movw	r30, r24
     970:	f9 cf       	rjmp	.-14     	; 0x964 <nwkDataReqTaskHandler+0xe8>
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
     972:	88 81       	ld	r24, Y
     974:	99 81       	ldd	r25, Y+1	; 0x01
     976:	91 83       	std	Z+1, r25	; 0x01
     978:	80 83       	st	Z, r24
  }

  nwkIb.lock--;
     97a:	ef ea       	ldi	r30, 0xAF	; 175
     97c:	fc e0       	ldi	r31, 0x0C	; 12
     97e:	80 81       	ld	r24, Z
     980:	91 81       	ldd	r25, Z+1	; 0x01
     982:	01 97       	sbiw	r24, 0x01	; 1
     984:	91 83       	std	Z+1, r25	; 0x01
     986:	80 83       	st	Z, r24
  req->confirm(req);
     988:	ed 85       	ldd	r30, Y+13	; 0x0d
     98a:	fe 85       	ldd	r31, Y+14	; 0x0e
     98c:	ce 01       	movw	r24, r28
     98e:	19 95       	eicall
     990:	06 c0       	rjmp	.+12     	; 0x99e <nwkDataReqTaskHandler+0x122>
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     992:	09 90       	ld	r0, Y+
     994:	d8 81       	ld	r29, Y
     996:	c0 2d       	mov	r28, r0
     998:	20 97       	sbiw	r28, 0x00	; 0
     99a:	09 f0       	breq	.+2      	; 0x99e <nwkDataReqTaskHandler+0x122>
     99c:	7b cf       	rjmp	.-266    	; 0x894 <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
     99e:	df 91       	pop	r29
     9a0:	cf 91       	pop	r28
     9a2:	1f 91       	pop	r17
     9a4:	0f 91       	pop	r16
     9a6:	08 95       	ret

000009a8 <nwkFrameInit>:

/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
     9a8:	e6 e9       	ldi	r30, 0x96	; 150
     9aa:	f2 e0       	ldi	r31, 0x02	; 2
     9ac:	80 ef       	ldi	r24, 0xF0	; 240
     9ae:	97 e0       	ldi	r25, 0x07	; 7
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     9b0:	10 82       	st	Z, r1
     9b2:	e7 57       	subi	r30, 0x77	; 119
     9b4:	ff 4f       	sbci	r31, 0xFF	; 255
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     9b6:	e8 17       	cp	r30, r24
     9b8:	f9 07       	cpc	r31, r25
     9ba:	d1 f7       	brne	.-12     	; 0x9b0 <nwkFrameInit+0x8>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
     9bc:	08 95       	ret

000009be <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
     9be:	80 91 96 02 	lds	r24, 0x0296
     9c2:	88 23       	and	r24, r24
     9c4:	49 f0       	breq	.+18     	; 0x9d8 <nwkFrameAlloc+0x1a>
     9c6:	ef e1       	ldi	r30, 0x1F	; 31
     9c8:	f3 e0       	ldi	r31, 0x03	; 3
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	9c 01       	movw	r18, r24
     9d0:	40 81       	ld	r20, Z
     9d2:	41 11       	cpse	r20, r1
     9d4:	22 c0       	rjmp	.+68     	; 0xa1a <nwkFrameAlloc+0x5c>
     9d6:	02 c0       	rjmp	.+4      	; 0x9dc <nwkFrameAlloc+0x1e>
     9d8:	20 e0       	ldi	r18, 0x00	; 0
     9da:	30 e0       	ldi	r19, 0x00	; 0
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
     9dc:	69 e8       	ldi	r22, 0x89	; 137
     9de:	62 9f       	mul	r22, r18
     9e0:	a0 01       	movw	r20, r0
     9e2:	63 9f       	mul	r22, r19
     9e4:	50 0d       	add	r21, r0
     9e6:	11 24       	eor	r1, r1
     9e8:	ca 01       	movw	r24, r20
     9ea:	8a 56       	subi	r24, 0x6A	; 106
     9ec:	9d 4f       	sbci	r25, 0xFD	; 253
     9ee:	fc 01       	movw	r30, r24
     9f0:	11 92       	st	Z+, r1
     9f2:	6a 95       	dec	r22
     9f4:	e9 f7       	brne	.-6      	; 0x9f0 <nwkFrameAlloc+0x32>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
     9f6:	20 e1       	ldi	r18, 0x10	; 16
     9f8:	fc 01       	movw	r30, r24
     9fa:	21 83       	std	Z+1, r18	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
     9fc:	ef 57       	subi	r30, 0x7F	; 127
     9fe:	ff 4f       	sbci	r31, 0xFF	; 255
     a00:	48 55       	subi	r20, 0x58	; 88
     a02:	5d 4f       	sbci	r21, 0xFD	; 253
     a04:	51 83       	std	Z+1, r21	; 0x01
     a06:	40 83       	st	Z, r20
      nwkIb.lock++;
     a08:	ef ea       	ldi	r30, 0xAF	; 175
     a0a:	fc e0       	ldi	r31, 0x0C	; 12
     a0c:	20 81       	ld	r18, Z
     a0e:	31 81       	ldd	r19, Z+1	; 0x01
     a10:	2f 5f       	subi	r18, 0xFF	; 255
     a12:	3f 4f       	sbci	r19, 0xFF	; 255
     a14:	31 83       	std	Z+1, r19	; 0x01
     a16:	20 83       	st	Z, r18
      return &nwkFrameFrames[i];
     a18:	08 95       	ret
     a1a:	01 96       	adiw	r24, 0x01	; 1
     a1c:	e7 57       	subi	r30, 0x77	; 119
     a1e:	ff 4f       	sbci	r31, 0xFF	; 255
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     a20:	8a 30       	cpi	r24, 0x0A	; 10
     a22:	91 05       	cpc	r25, r1
     a24:	a1 f6       	brne	.-88     	; 0x9ce <nwkFrameAlloc+0x10>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	90 e0       	ldi	r25, 0x00	; 0
}
     a2a:	08 95       	ret

00000a2c <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
     a2c:	fc 01       	movw	r30, r24
     a2e:	10 82       	st	Z, r1
  nwkIb.lock--;
     a30:	ef ea       	ldi	r30, 0xAF	; 175
     a32:	fc e0       	ldi	r31, 0x0C	; 12
     a34:	80 81       	ld	r24, Z
     a36:	91 81       	ldd	r25, Z+1	; 0x01
     a38:	01 97       	sbiw	r24, 0x01	; 1
     a3a:	91 83       	std	Z+1, r25	; 0x01
     a3c:	80 83       	st	Z, r24
     a3e:	08 95       	ret

00000a40 <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	41 f0       	breq	.+16     	; 0xa54 <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
     a44:	fc 01       	movw	r30, r24
     a46:	e7 57       	subi	r30, 0x77	; 119
     a48:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     a4a:	87 e0       	ldi	r24, 0x07	; 7
     a4c:	e0 3f       	cpi	r30, 0xF0	; 240
     a4e:	f8 07       	cpc	r31, r24
     a50:	18 f0       	brcs	.+6      	; 0xa58 <nwkFrameNext+0x18>
     a52:	12 c0       	rjmp	.+36     	; 0xa78 <nwkFrameNext+0x38>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
     a54:	e6 e9       	ldi	r30, 0x96	; 150
     a56:	f2 e0       	ldi	r31, 0x02	; 2
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     a58:	80 81       	ld	r24, Z
     a5a:	88 23       	and	r24, r24
     a5c:	21 f0       	breq	.+8      	; 0xa66 <nwkFrameNext+0x26>
     a5e:	0f c0       	rjmp	.+30     	; 0xa7e <nwkFrameNext+0x3e>
     a60:	80 81       	ld	r24, Z
     a62:	81 11       	cpse	r24, r1
     a64:	0f c0       	rjmp	.+30     	; 0xa84 <nwkFrameNext+0x44>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     a66:	e7 57       	subi	r30, 0x77	; 119
     a68:	ff 4f       	sbci	r31, 0xFF	; 255
     a6a:	87 e0       	ldi	r24, 0x07	; 7
     a6c:	e0 3f       	cpi	r30, 0xF0	; 240
     a6e:	f8 07       	cpc	r31, r24
     a70:	b8 f3       	brcs	.-18     	; 0xa60 <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	08 95       	ret
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	08 95       	ret
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     a7e:	8e 2f       	mov	r24, r30
     a80:	9f 2f       	mov	r25, r31
     a82:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     a84:	8e 2f       	mov	r24, r30
     a86:	9f 2f       	mov	r25, r31
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
}
     a88:	08 95       	ret

00000a8a <nwkFrameCommandInit>:
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
  frame->tx.status = NWK_SUCCESS_STATUS;
     a8a:	fc 01       	movw	r30, r24
     a8c:	ed 57       	subi	r30, 0x7D	; 125
     a8e:	ff 4f       	sbci	r31, 0xFF	; 255
     a90:	10 82       	st	Z, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     a92:	ed e8       	ldi	r30, 0x8D	; 141
     a94:	fc e0       	ldi	r31, 0x0C	; 12
     a96:	20 81       	ld	r18, Z
     a98:	2f 5f       	subi	r18, 0xFF	; 255
     a9a:	20 83       	st	Z, r18
     a9c:	fc 01       	movw	r30, r24
     a9e:	24 87       	std	Z+12, r18	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
     aa0:	20 91 89 0c 	lds	r18, 0x0C89
     aa4:	30 91 8a 0c 	lds	r19, 0x0C8A
     aa8:	36 87       	std	Z+14, r19	; 0x0e
     aaa:	25 87       	std	Z+13, r18	; 0x0d
     aac:	08 95       	ret

00000aae <nwkRouteInit>:

/*************************************************************************//**
  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
     aae:	e5 ef       	ldi	r30, 0xF5	; 245
     ab0:	f7 e0       	ldi	r31, 0x07	; 7
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	90 e0       	ldi	r25, 0x00	; 0
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
  {
    nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
     ab6:	2f ef       	ldi	r18, 0xFF	; 255
     ab8:	3f ef       	ldi	r19, 0xFF	; 255
     aba:	df 01       	movw	r26, r30
     abc:	14 97       	sbiw	r26, 0x04	; 4
     abe:	2d 93       	st	X+, r18
     ac0:	3c 93       	st	X, r19
    nwkRouteTable[i].fixed = 0;
     ac2:	dc 01       	movw	r26, r24
     ac4:	aa 0f       	add	r26, r26
     ac6:	bb 1f       	adc	r27, r27
     ac8:	aa 0f       	add	r26, r26
     aca:	bb 1f       	adc	r27, r27
     acc:	aa 0f       	add	r26, r26
     ace:	bb 1f       	adc	r27, r27
     ad0:	a8 1b       	sub	r26, r24
     ad2:	b9 0b       	sbc	r27, r25
     ad4:	a0 51       	subi	r26, 0x10	; 16
     ad6:	b8 4f       	sbci	r27, 0xF8	; 248
     ad8:	4c 91       	ld	r20, X
     ada:	4e 7f       	andi	r20, 0xFE	; 254
     adc:	4c 93       	st	X, r20
    nwkRouteTable[i].rank = 0;
     ade:	10 82       	st	Z, r1
     ae0:	01 96       	adiw	r24, 0x01	; 1
     ae2:	37 96       	adiw	r30, 0x07	; 7
/*************************************************************************//**
  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
     ae4:	84 36       	cpi	r24, 0x64	; 100
     ae6:	91 05       	cpc	r25, r1
     ae8:	41 f7       	brne	.-48     	; 0xaba <nwkRouteInit+0xc>
  {
    nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    nwkRouteTable[i].fixed = 0;
    nwkRouteTable[i].rank = 0;
  }
}
     aea:	08 95       	ret

00000aec <NWK_RouteFindEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
     af0:	e1 ef       	ldi	r30, 0xF1	; 241
     af2:	f7 e0       	ldi	r31, 0x07	; 7
     af4:	20 e0       	ldi	r18, 0x00	; 0
     af6:	30 e0       	ldi	r19, 0x00	; 0
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
  {
    if (nwkRouteTable[i].dstAddr == dst &&
        nwkRouteTable[i].multicast == multicast)
     af8:	70 e0       	ldi	r23, 0x00	; 0
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
  {
    if (nwkRouteTable[i].dstAddr == dst &&
     afa:	40 81       	ld	r20, Z
     afc:	51 81       	ldd	r21, Z+1	; 0x01
     afe:	48 17       	cp	r20, r24
     b00:	59 07       	cpc	r21, r25
     b02:	09 f5       	brne	.+66     	; 0xb46 <NWK_RouteFindEntry+0x5a>
        nwkRouteTable[i].multicast == multicast)
     b04:	a9 01       	movw	r20, r18
     b06:	44 0f       	add	r20, r20
     b08:	55 1f       	adc	r21, r21
     b0a:	44 0f       	add	r20, r20
     b0c:	55 1f       	adc	r21, r21
     b0e:	44 0f       	add	r20, r20
     b10:	55 1f       	adc	r21, r21
     b12:	42 1b       	sub	r20, r18
     b14:	53 0b       	sbc	r21, r19
     b16:	40 51       	subi	r20, 0x10	; 16
     b18:	58 4f       	sbci	r21, 0xF8	; 248
     b1a:	ea 01       	movw	r28, r20
     b1c:	48 81       	ld	r20, Y
     b1e:	46 95       	lsr	r20
     b20:	41 70       	andi	r20, 0x01	; 1
     b22:	c4 2f       	mov	r28, r20
     b24:	40 e0       	ldi	r20, 0x00	; 0
     b26:	d4 2f       	mov	r29, r20
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
  {
    if (nwkRouteTable[i].dstAddr == dst &&
     b28:	c6 17       	cp	r28, r22
     b2a:	d7 07       	cpc	r29, r23
     b2c:	61 f4       	brne	.+24     	; 0xb46 <NWK_RouteFindEntry+0x5a>
        nwkRouteTable[i].multicast == multicast)
      return &nwkRouteTable[i];
     b2e:	c9 01       	movw	r24, r18
     b30:	88 0f       	add	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	88 0f       	add	r24, r24
     b36:	99 1f       	adc	r25, r25
     b38:	88 0f       	add	r24, r24
     b3a:	99 1f       	adc	r25, r25
     b3c:	82 1b       	sub	r24, r18
     b3e:	93 0b       	sbc	r25, r19
     b40:	80 51       	subi	r24, 0x10	; 16
     b42:	98 4f       	sbci	r25, 0xF8	; 248
     b44:	08 c0       	rjmp	.+16     	; 0xb56 <NWK_RouteFindEntry+0x6a>
     b46:	2f 5f       	subi	r18, 0xFF	; 255
     b48:	3f 4f       	sbci	r19, 0xFF	; 255
     b4a:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
     b4c:	24 36       	cpi	r18, 0x64	; 100
     b4e:	31 05       	cpc	r19, r1
     b50:	a1 f6       	brne	.-88     	; 0xafa <NWK_RouteFindEntry+0xe>
    if (nwkRouteTable[i].dstAddr == dst &&
        nwkRouteTable[i].multicast == multicast)
      return &nwkRouteTable[i];
  }

  return NULL;
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	90 e0       	ldi	r25, 0x00	; 0
}
     b56:	df 91       	pop	r29
     b58:	cf 91       	pop	r28
     b5a:	08 95       	ret

00000b5c <NWK_RouteNewEntry>:
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
  NWK_RouteTableEntry_t *iter = nwkRouteTable;
  NWK_RouteTableEntry_t *entry = NULL;
     b5c:	a0 e0       	ldi	r26, 0x00	; 0
     b5e:	b0 e0       	ldi	r27, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
  NWK_RouteTableEntry_t *iter = nwkRouteTable;
     b60:	e0 ef       	ldi	r30, 0xF0	; 240
     b62:	f7 e0       	ldi	r31, 0x07	; 7
  NWK_RouteTableEntry_t *entry = NULL;

  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++)
  {
    if (iter->fixed)
     b64:	80 81       	ld	r24, Z
     b66:	80 fd       	sbrc	r24, 0
     b68:	0e c0       	rjmp	.+28     	; 0xb86 <NWK_RouteNewEntry+0x2a>
      continue;

    if (0 == iter->rank)
     b6a:	85 81       	ldd	r24, Z+5	; 0x05
     b6c:	88 23       	and	r24, r24
     b6e:	89 f0       	breq	.+34     	; 0xb92 <NWK_RouteNewEntry+0x36>
    {
      entry = iter;
      break;
    }

    if (NULL == entry || iter->rank < entry->rank)
     b70:	10 97       	sbiw	r26, 0x00	; 0
     b72:	31 f0       	breq	.+12     	; 0xb80 <NWK_RouteNewEntry+0x24>
     b74:	15 96       	adiw	r26, 0x05	; 5
     b76:	9c 91       	ld	r25, X
     b78:	15 97       	sbiw	r26, 0x05	; 5
     b7a:	89 17       	cp	r24, r25
     b7c:	18 f0       	brcs	.+6      	; 0xb84 <NWK_RouteNewEntry+0x28>
     b7e:	03 c0       	rjmp	.+6      	; 0xb86 <NWK_RouteNewEntry+0x2a>
     b80:	df 01       	movw	r26, r30
     b82:	01 c0       	rjmp	.+2      	; 0xb86 <NWK_RouteNewEntry+0x2a>
     b84:	df 01       	movw	r26, r30
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
  NWK_RouteTableEntry_t *iter = nwkRouteTable;
  NWK_RouteTableEntry_t *entry = NULL;

  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++)
     b86:	37 96       	adiw	r30, 0x07	; 7
     b88:	8a e0       	ldi	r24, 0x0A	; 10
     b8a:	ec 3a       	cpi	r30, 0xAC	; 172
     b8c:	f8 07       	cpc	r31, r24
     b8e:	51 f7       	brne	.-44     	; 0xb64 <NWK_RouteNewEntry+0x8>
     b90:	fd 01       	movw	r30, r26

    if (NULL == entry || iter->rank < entry->rank)
      entry = iter;
  }

  entry->multicast = 0;
     b92:	80 81       	ld	r24, Z
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
     b94:	8d 70       	andi	r24, 0x0D	; 13
     b96:	80 63       	ori	r24, 0x30	; 48
     b98:	80 83       	st	Z, r24
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
     b9a:	80 e8       	ldi	r24, 0x80	; 128
     b9c:	85 83       	std	Z+5, r24	; 0x05

  return entry;
}
     b9e:	cf 01       	movw	r24, r30
     ba0:	08 95       	ret

00000ba2 <NWK_RouteFreeEntry>:

/*************************************************************************//**
*****************************************************************************/
void NWK_RouteFreeEntry(NWK_RouteTableEntry_t *entry)
{
     ba2:	fc 01       	movw	r30, r24
  if (entry->fixed)
     ba4:	80 81       	ld	r24, Z
     ba6:	80 fd       	sbrc	r24, 0
     ba8:	05 c0       	rjmp	.+10     	; 0xbb4 <NWK_RouteFreeEntry+0x12>
    return;
  entry->dstAddr = NWK_ROUTE_UNKNOWN;
     baa:	8f ef       	ldi	r24, 0xFF	; 255
     bac:	9f ef       	ldi	r25, 0xFF	; 255
     bae:	92 83       	std	Z+2, r25	; 0x02
     bb0:	81 83       	std	Z+1, r24	; 0x01
  entry->rank = 0;
     bb2:	15 82       	std	Z+5, r1	; 0x05
     bb4:	08 95       	ret

00000bb6 <NWK_RouteNextHop>:
*****************************************************************************/
uint16_t NWK_RouteNextHop(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
     bb6:	0e 94 76 05 	call	0xaec	; 0xaec <NWK_RouteFindEntry>
  if (entry)
     bba:	00 97       	sbiw	r24, 0x00	; 0
     bbc:	21 f0       	breq	.+8      	; 0xbc6 <NWK_RouteNextHop+0x10>
    return entry->nextHopAddr;
     bbe:	fc 01       	movw	r30, r24
     bc0:	83 81       	ldd	r24, Z+3	; 0x03
     bc2:	94 81       	ldd	r25, Z+4	; 0x04
     bc4:	08 95       	ret

  return NWK_ROUTE_UNKNOWN;
     bc6:	8f ef       	ldi	r24, 0xFF	; 255
     bc8:	9f ef       	ldi	r25, 0xFF	; 255
}
     bca:	08 95       	ret

00000bcc <NWK_RouteTable>:
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteTable(void)
{
  return nwkRouteTable;
}
     bcc:	80 ef       	ldi	r24, 0xF0	; 240
     bce:	97 e0       	ldi	r25, 0x07	; 7
     bd0:	08 95       	ret

00000bd2 <nwkRouteUpdateEntry>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteUpdateEntry(uint16_t dst, uint8_t multicast, uint16_t nextHop, uint8_t lqi)
{
     bd2:	ef 92       	push	r14
     bd4:	ff 92       	push	r15
     bd6:	0f 93       	push	r16
     bd8:	1f 93       	push	r17
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	ec 01       	movw	r28, r24
     be0:	f6 2e       	mov	r15, r22
     be2:	8a 01       	movw	r16, r20
     be4:	e2 2e       	mov	r14, r18
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
     be6:	0e 94 76 05 	call	0xaec	; 0xaec <NWK_RouteFindEntry>
     bea:	fc 01       	movw	r30, r24

  if (NULL == entry)
     bec:	00 97       	sbiw	r24, 0x00	; 0
     bee:	19 f4       	brne	.+6      	; 0xbf6 <nwkRouteUpdateEntry+0x24>
    entry = NWK_RouteNewEntry();
     bf0:	0e 94 ae 05 	call	0xb5c	; 0xb5c <NWK_RouteNewEntry>
     bf4:	fc 01       	movw	r30, r24

  entry->dstAddr = dst;
     bf6:	d2 83       	std	Z+2, r29	; 0x02
     bf8:	c1 83       	std	Z+1, r28	; 0x01
  entry->nextHopAddr = nextHop;
     bfa:	14 83       	std	Z+4, r17	; 0x04
     bfc:	03 83       	std	Z+3, r16	; 0x03
  entry->multicast = multicast;
     bfe:	80 81       	ld	r24, Z
     c00:	f0 fa       	bst	r15, 0
     c02:	81 f9       	bld	r24, 1
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
     c04:	8f 70       	andi	r24, 0x0F	; 15
     c06:	80 63       	ori	r24, 0x30	; 48
     c08:	80 83       	st	Z, r24
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
     c0a:	80 e8       	ldi	r24, 0x80	; 128
     c0c:	85 83       	std	Z+5, r24	; 0x05
  entry->lqi = lqi;
     c0e:	e6 82       	std	Z+6, r14	; 0x06
}
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	1f 91       	pop	r17
     c16:	0f 91       	pop	r16
     c18:	ff 90       	pop	r15
     c1a:	ef 90       	pop	r14
     c1c:	08 95       	ret

00000c1e <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
     c1e:	0e 94 76 05 	call	0xaec	; 0xaec <NWK_RouteFindEntry>
  if (entry)
     c22:	00 97       	sbiw	r24, 0x00	; 0
     c24:	11 f0       	breq	.+4      	; 0xc2a <nwkRouteRemove+0xc>
    NWK_RouteFreeEntry(entry);
     c26:	0e 94 d1 05 	call	0xba2	; 0xba2 <NWK_RouteFreeEntry>
     c2a:	08 95       	ret

00000c2c <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
     c2c:	0f 93       	push	r16
     c2e:	1f 93       	push	r17
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	ec 01       	movw	r28, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
     c36:	09 85       	ldd	r16, Y+9	; 0x09
     c38:	1a 85       	ldd	r17, Y+10	; 0x0a
     c3a:	11 23       	and	r17, r17
     c3c:	34 f4       	brge	.+12     	; 0xc4a <nwkRouteFrameReceived+0x1e>
     c3e:	8d 85       	ldd	r24, Y+13	; 0x0d
     c40:	9e 85       	ldd	r25, Y+14	; 0x0e
     c42:	08 17       	cp	r16, r24
     c44:	19 07       	cpc	r17, r25
     c46:	09 f0       	breq	.+2      	; 0xc4a <nwkRouteFrameReceived+0x1e>
     c48:	42 c0       	rjmp	.+132    	; 0xcce <nwkRouteFrameReceived+0xa2>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     c4a:	8d 81       	ldd	r24, Y+5	; 0x05
     c4c:	9e 81       	ldd	r25, Y+6	; 0x06
     c4e:	01 96       	adiw	r24, 0x01	; 1
     c50:	f1 f1       	breq	.+124    	; 0xcce <nwkRouteFrameReceived+0xa2>
    return;

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
     c52:	60 e0       	ldi	r22, 0x00	; 0
     c54:	8d 85       	ldd	r24, Y+13	; 0x0d
     c56:	9e 85       	ldd	r25, Y+14	; 0x0e
     c58:	0e 94 76 05 	call	0xaec	; 0xaec <NWK_RouteFindEntry>
     c5c:	fc 01       	movw	r30, r24

  if (entry)
     c5e:	00 97       	sbiw	r24, 0x00	; 0
     c60:	39 f1       	breq	.+78     	; 0xcb0 <nwkRouteFrameReceived+0x84>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
     c62:	8f 81       	ldd	r24, Y+7	; 0x07
     c64:	98 85       	ldd	r25, Y+8	; 0x08
     c66:	01 96       	adiw	r24, 0x01	; 1
     c68:	69 f4       	brne	.+26     	; 0xc84 <nwkRouteFrameReceived+0x58>
     c6a:	41 e0       	ldi	r20, 0x01	; 1
     c6c:	20 91 89 0c 	lds	r18, 0x0C89
     c70:	30 91 8a 0c 	lds	r19, 0x0C8A
     c74:	8f 85       	ldd	r24, Y+15	; 0x0f
     c76:	98 89       	ldd	r25, Y+16	; 0x10
     c78:	28 17       	cp	r18, r24
     c7a:	39 07       	cpc	r19, r25
     c7c:	09 f0       	breq	.+2      	; 0xc80 <nwkRouteFrameReceived+0x54>
     c7e:	40 e0       	ldi	r20, 0x00	; 0
     c80:	24 2f       	mov	r18, r20
     c82:	01 c0       	rjmp	.+2      	; 0xc86 <nwkRouteFrameReceived+0x5a>
     c84:	20 e0       	ldi	r18, 0x00	; 0
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
     c86:	83 81       	ldd	r24, Z+3	; 0x03
     c88:	94 81       	ldd	r25, Z+4	; 0x04
     c8a:	08 17       	cp	r16, r24
     c8c:	19 07       	cpc	r17, r25
     c8e:	39 f0       	breq	.+14     	; 0xc9e <nwkRouteFrameReceived+0x72>
     c90:	de 01       	movw	r26, r28
     c92:	ad 57       	subi	r26, 0x7D	; 125
     c94:	bf 4f       	sbci	r27, 0xFF	; 255
     c96:	9c 91       	ld	r25, X
     c98:	86 81       	ldd	r24, Z+6	; 0x06
     c9a:	89 17       	cp	r24, r25
     c9c:	10 f0       	brcs	.+4      	; 0xca2 <nwkRouteFrameReceived+0x76>
     c9e:	20 ff       	sbrs	r18, 0
     ca0:	12 c0       	rjmp	.+36     	; 0xcc6 <nwkRouteFrameReceived+0x9a>
    {
      entry->nextHopAddr = header->macSrcAddr;
     ca2:	14 83       	std	Z+4, r17	; 0x04
     ca4:	03 83       	std	Z+3, r16	; 0x03
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
     ca6:	80 81       	ld	r24, Z
     ca8:	8f 70       	andi	r24, 0x0F	; 15
     caa:	80 63       	ori	r24, 0x30	; 48
     cac:	80 83       	st	Z, r24
     cae:	0b c0       	rjmp	.+22     	; 0xcc6 <nwkRouteFrameReceived+0x9a>
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
     cb0:	0e 94 ae 05 	call	0xb5c	; 0xb5c <NWK_RouteNewEntry>
     cb4:	fc 01       	movw	r30, r24

    entry->dstAddr = header->nwkSrcAddr;
     cb6:	8d 85       	ldd	r24, Y+13	; 0x0d
     cb8:	9e 85       	ldd	r25, Y+14	; 0x0e
     cba:	92 83       	std	Z+2, r25	; 0x02
     cbc:	81 83       	std	Z+1, r24	; 0x01
    entry->nextHopAddr = header->macSrcAddr;
     cbe:	89 85       	ldd	r24, Y+9	; 0x09
     cc0:	9a 85       	ldd	r25, Y+10	; 0x0a
     cc2:	94 83       	std	Z+4, r25	; 0x04
     cc4:	83 83       	std	Z+3, r24	; 0x03
  }

  entry->lqi = frame->rx.lqi;
     cc6:	cd 57       	subi	r28, 0x7D	; 125
     cc8:	df 4f       	sbci	r29, 0xFF	; 255
     cca:	88 81       	ld	r24, Y
     ccc:	86 83       	std	Z+6, r24	; 0x06
#else
  (void)frame;
#endif
}
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	1f 91       	pop	r17
     cd4:	0f 91       	pop	r16
     cd6:	08 95       	ret

00000cd8 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
     cd8:	cf 93       	push	r28
     cda:	df 93       	push	r29
     cdc:	ec 01       	movw	r28, r24
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
     cde:	8f 85       	ldd	r24, Y+15	; 0x0f
     ce0:	98 89       	ldd	r25, Y+16	; 0x10
     ce2:	8f 3f       	cpi	r24, 0xFF	; 255
     ce4:	2f ef       	ldi	r18, 0xFF	; 255
     ce6:	92 07       	cpc	r25, r18
     ce8:	c1 f1       	breq	.+112    	; 0xd5a <nwkRouteFrameSent+0x82>
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
     cea:	6b 85       	ldd	r22, Y+11	; 0x0b
     cec:	63 fb       	bst	r22, 3
     cee:	66 27       	eor	r22, r22
     cf0:	60 f9       	bld	r22, 0
     cf2:	0e 94 76 05 	call	0xaec	; 0xaec <NWK_RouteFindEntry>
     cf6:	fc 01       	movw	r30, r24

  if (NULL == entry || entry->fixed)
     cf8:	00 97       	sbiw	r24, 0x00	; 0
     cfa:	79 f1       	breq	.+94     	; 0xd5a <nwkRouteFrameSent+0x82>
     cfc:	80 81       	ld	r24, Z
     cfe:	80 fd       	sbrc	r24, 0
     d00:	2c c0       	rjmp	.+88     	; 0xd5a <nwkRouteFrameSent+0x82>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
     d02:	cd 57       	subi	r28, 0x7D	; 125
     d04:	df 4f       	sbci	r29, 0xFF	; 255
     d06:	88 81       	ld	r24, Y
     d08:	81 11       	cpse	r24, r1
     d0a:	16 c0       	rjmp	.+44     	; 0xd38 <nwkRouteFrameSent+0x60>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
     d0c:	80 81       	ld	r24, Z
     d0e:	8f 70       	andi	r24, 0x0F	; 15
     d10:	80 63       	ori	r24, 0x30	; 48
     d12:	80 83       	st	Z, r24

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
     d14:	85 81       	ldd	r24, Z+5	; 0x05
     d16:	8f 5f       	subi	r24, 0xFF	; 255
     d18:	85 83       	std	Z+5, r24	; 0x05
     d1a:	8f 3f       	cpi	r24, 0xFF	; 255
     d1c:	f1 f4       	brne	.+60     	; 0xd5a <nwkRouteFrameSent+0x82>
     d1e:	e5 ef       	ldi	r30, 0xF5	; 245
     d20:	f7 e0       	ldi	r31, 0x07	; 7
     d22:	81 eb       	ldi	r24, 0xB1	; 177
     d24:	9a e0       	ldi	r25, 0x0A	; 10
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
     d26:	20 81       	ld	r18, Z
     d28:	26 95       	lsr	r18
     d2a:	2f 5f       	subi	r18, 0xFF	; 255
     d2c:	20 83       	st	Z, r18
     d2e:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
     d30:	e8 17       	cp	r30, r24
     d32:	f9 07       	cpc	r31, r25
     d34:	c1 f7       	brne	.-16     	; 0xd26 <nwkRouteFrameSent+0x4e>
     d36:	11 c0       	rjmp	.+34     	; 0xd5a <nwkRouteFrameSent+0x82>
    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
      nwkRouteNormalizeRanks();
  }
  else
  {
    if (0 == --entry->score)
     d38:	90 81       	ld	r25, Z
     d3a:	89 2f       	mov	r24, r25
     d3c:	82 95       	swap	r24
     d3e:	8f 70       	andi	r24, 0x0F	; 15
     d40:	81 5f       	subi	r24, 0xF1	; 241
     d42:	8f 70       	andi	r24, 0x0F	; 15
     d44:	28 2f       	mov	r18, r24
     d46:	22 95       	swap	r18
     d48:	20 7f       	andi	r18, 0xF0	; 240
     d4a:	9f 70       	andi	r25, 0x0F	; 15
     d4c:	92 2b       	or	r25, r18
     d4e:	90 83       	st	Z, r25
     d50:	81 11       	cpse	r24, r1
     d52:	03 c0       	rjmp	.+6      	; 0xd5a <nwkRouteFrameSent+0x82>
      NWK_RouteFreeEntry(entry);
     d54:	cf 01       	movw	r24, r30
     d56:	0e 94 d1 05 	call	0xba2	; 0xba2 <NWK_RouteFreeEntry>
  }
}
     d5a:	df 91       	pop	r29
     d5c:	cf 91       	pop	r28
     d5e:	08 95       	ret

00000d60 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
     d66:	8f 85       	ldd	r24, Y+15	; 0x0f
     d68:	98 89       	ldd	r25, Y+16	; 0x10
     d6a:	8f 3f       	cpi	r24, 0xFF	; 255
     d6c:	2f ef       	ldi	r18, 0xFF	; 255
     d6e:	92 07       	cpc	r25, r18
     d70:	29 f4       	brne	.+10     	; 0xd7c <nwkRoutePrepareTx+0x1c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
     d72:	8f ef       	ldi	r24, 0xFF	; 255
     d74:	9f ef       	ldi	r25, 0xFF	; 255
     d76:	98 87       	std	Y+8, r25	; 0x08
     d78:	8f 83       	std	Y+7, r24	; 0x07
     d7a:	0e c0       	rjmp	.+28     	; 0xd98 <nwkRoutePrepareTx+0x38>
  }

  else if (header->nwkFcf.linkLocal)
     d7c:	2b 85       	ldd	r18, Y+11	; 0x0b
     d7e:	22 ff       	sbrs	r18, 2
     d80:	03 c0       	rjmp	.+6      	; 0xd88 <nwkRoutePrepareTx+0x28>
  {
    header->macDstAddr = header->nwkDstAddr;
     d82:	98 87       	std	Y+8, r25	; 0x08
     d84:	8f 83       	std	Y+7, r24	; 0x07
     d86:	08 c0       	rjmp	.+16     	; 0xd98 <nwkRoutePrepareTx+0x38>
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
     d88:	6b 85       	ldd	r22, Y+11	; 0x0b
     d8a:	63 fb       	bst	r22, 3
     d8c:	66 27       	eor	r22, r22
     d8e:	60 f9       	bld	r22, 0
     d90:	0e 94 db 05 	call	0xbb6	; 0xbb6 <NWK_RouteNextHop>
     d94:	98 87       	std	Y+8, r25	; 0x08
     d96:	8f 83       	std	Y+7, r24	; 0x07
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
     d98:	df 91       	pop	r29
     d9a:	cf 91       	pop	r28
     d9c:	08 95       	ret

00000d9e <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
     d9e:	bf 92       	push	r11
     da0:	cf 92       	push	r12
     da2:	df 92       	push	r13
     da4:	ef 92       	push	r14
     da6:	ff 92       	push	r15
     da8:	0f 93       	push	r16
     daa:	1f 93       	push	r17
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
     db0:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
     db2:	bb 84       	ldd	r11, Y+11	; 0x0b
     db4:	b3 fa       	bst	r11, 3
     db6:	bb 24       	eor	r11, r11
     db8:	b0 f8       	bld	r11, 0
     dba:	ef 84       	ldd	r14, Y+15	; 0x0f
     dbc:	f8 88       	ldd	r15, Y+16	; 0x10
     dbe:	6b 2d       	mov	r22, r11
     dc0:	c7 01       	movw	r24, r14
     dc2:	0e 94 db 05 	call	0xbb6	; 0xbb6 <NWK_RouteNextHop>
     dc6:	01 96       	adiw	r24, 0x01	; 1
     dc8:	61 f0       	breq	.+24     	; 0xde2 <nwkRouteFrame+0x44>
  {
    frame->tx.confirm = NULL;
     dca:	fe 01       	movw	r30, r28
     dcc:	e9 57       	subi	r30, 0x79	; 121
     dce:	ff 4f       	sbci	r31, 0xFF	; 255
     dd0:	11 82       	std	Z+1, r1	; 0x01
     dd2:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
     dd4:	31 97       	sbiw	r30, 0x01	; 1
     dd6:	82 e0       	ldi	r24, 0x02	; 2
     dd8:	80 83       	st	Z, r24
    nwkTxFrame(frame);
     dda:	ce 01       	movw	r24, r28
     ddc:	0e 94 5f 0a 	call	0x14be	; 0x14be <nwkTxFrame>
     de0:	26 c0       	rjmp	.+76     	; 0xe2e <nwkRouteFrame+0x90>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
     de2:	cd 84       	ldd	r12, Y+13	; 0x0d
     de4:	de 84       	ldd	r13, Y+14	; 0x0e
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst, uint8_t multicast)
{
  NwkFrame_t *frame;
  NwkCommandRouteError_t *command;

  if (NULL == (frame = nwkFrameAlloc()))
     de6:	0e 94 df 04 	call	0x9be	; 0x9be <nwkFrameAlloc>
     dea:	8c 01       	movw	r16, r24
     dec:	00 97       	sbiw	r24, 0x00	; 0
     dee:	e1 f0       	breq	.+56     	; 0xe28 <nwkRouteFrame+0x8a>
    return;

  nwkFrameCommandInit(frame);
     df0:	0e 94 45 05 	call	0xa8a	; 0xa8a <nwkFrameCommandInit>

  frame->size += sizeof(NwkCommandRouteError_t);
     df4:	f8 01       	movw	r30, r16
     df6:	81 81       	ldd	r24, Z+1	; 0x01
     df8:	8a 5f       	subi	r24, 0xFA	; 250
     dfa:	81 83       	std	Z+1, r24	; 0x01
  frame->tx.confirm = NULL;
     dfc:	e9 57       	subi	r30, 0x79	; 121
     dfe:	ff 4f       	sbci	r31, 0xFF	; 255
     e00:	11 82       	std	Z+1, r1	; 0x01
     e02:	10 82       	st	Z, r1

  frame->header.nwkDstAddr = src;
     e04:	f8 01       	movw	r30, r16
     e06:	d0 8a       	std	Z+16, r13	; 0x10
     e08:	c7 86       	std	Z+15, r12	; 0x0f

  command = (NwkCommandRouteError_t *)frame->payload;
     e0a:	ef 57       	subi	r30, 0x7F	; 127
     e0c:	ff 4f       	sbci	r31, 0xFF	; 255
     e0e:	01 90       	ld	r0, Z+
     e10:	f0 81       	ld	r31, Z
     e12:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ROUTE_ERROR;
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	80 83       	st	Z, r24
  command->srcAddr = src;
     e18:	d2 82       	std	Z+2, r13	; 0x02
     e1a:	c1 82       	std	Z+1, r12	; 0x01
  command->dstAddr = dst;
     e1c:	f4 82       	std	Z+4, r15	; 0x04
     e1e:	e3 82       	std	Z+3, r14	; 0x03
  command->multicast = multicast;
     e20:	b5 82       	std	Z+5, r11	; 0x05

  nwkTxFrame(frame);
     e22:	c8 01       	movw	r24, r16
     e24:	0e 94 5f 0a 	call	0x14be	; 0x14be <nwkTxFrame>
    nwkTxFrame(frame);
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    nwkFrameFree(frame);
     e28:	ce 01       	movw	r24, r28
     e2a:	0e 94 16 05 	call	0xa2c	; 0xa2c <nwkFrameFree>
  }
}
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	1f 91       	pop	r17
     e34:	0f 91       	pop	r16
     e36:	ff 90       	pop	r15
     e38:	ef 90       	pop	r14
     e3a:	df 90       	pop	r13
     e3c:	cf 90       	pop	r12
     e3e:	bf 90       	pop	r11
     e40:	08 95       	ret

00000e42 <nwkRouteErrorReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
     e42:	dc 01       	movw	r26, r24
     e44:	17 96       	adiw	r26, 0x07	; 7
     e46:	ed 91       	ld	r30, X+
     e48:	fc 91       	ld	r31, X
     e4a:	18 97       	sbiw	r26, 0x08	; 8

  if (sizeof(NwkCommandRouteError_t) != ind->size)
     e4c:	19 96       	adiw	r26, 0x09	; 9
     e4e:	8c 91       	ld	r24, X
     e50:	86 30       	cpi	r24, 0x06	; 6
     e52:	39 f4       	brne	.+14     	; 0xe62 <nwkRouteErrorReceived+0x20>
    return false;

  nwkRouteRemove(command->dstAddr, command->multicast);
     e54:	65 81       	ldd	r22, Z+5	; 0x05
     e56:	83 81       	ldd	r24, Z+3	; 0x03
     e58:	94 81       	ldd	r25, Z+4	; 0x04
     e5a:	0e 94 0f 06 	call	0xc1e	; 0xc1e <nwkRouteRemove>

  return true;
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;
     e62:	80 e0       	ldi	r24, 0x00	; 0

  nwkRouteRemove(command->dstAddr, command->multicast);

  return true;
}
     e64:	08 95       	ret

00000e66 <nwkRxServiceDataInd>:
#ifdef NWK_ENABLE_SECURE_COMMANDS
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
     e66:	dc 01       	movw	r26, r24
     e68:	19 96       	adiw	r26, 0x09	; 9
     e6a:	2c 91       	ld	r18, X
     e6c:	19 97       	sbiw	r26, 0x09	; 9
     e6e:	22 23       	and	r18, r18
     e70:	81 f0       	breq	.+32     	; 0xe92 <nwkRxServiceDataInd+0x2c>
    return false;

  switch (ind->data[0])
     e72:	17 96       	adiw	r26, 0x07	; 7
     e74:	ed 91       	ld	r30, X+
     e76:	fc 91       	ld	r31, X
     e78:	18 97       	sbiw	r26, 0x08	; 8
     e7a:	20 81       	ld	r18, Z
     e7c:	22 23       	and	r18, r18
     e7e:	19 f0       	breq	.+6      	; 0xe86 <nwkRxServiceDataInd+0x20>
     e80:	21 30       	cpi	r18, 0x01	; 1
     e82:	21 f0       	breq	.+8      	; 0xe8c <nwkRxServiceDataInd+0x26>
     e84:	08 c0       	rjmp	.+16     	; 0xe96 <nwkRxServiceDataInd+0x30>
  {
    case NWK_COMMAND_ACK:
      return nwkTxAckReceived(ind);
     e86:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <nwkTxAckReceived>
     e8a:	08 95       	ret

#ifdef NWK_ENABLE_ROUTING
    case NWK_COMMAND_ROUTE_ERROR:
      return nwkRouteErrorReceived(ind);
     e8c:	0e 94 21 07 	call	0xe42	; 0xe42 <nwkRouteErrorReceived>
     e90:	08 95       	ret
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    return false;
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	08 95       	ret
    case NWK_COMMAND_ROUTE_REPLY:
      return nwkRouteDiscoveryReplyReceived(ind);
#endif

    default:
      return false;
     e96:	80 e0       	ldi	r24, 0x00	; 0
  }
}
     e98:	08 95       	ret

00000e9a <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
     e9a:	ee eb       	ldi	r30, 0xBE	; 190
     e9c:	fa e0       	ldi	r31, 0x0A	; 10
     e9e:	28 eb       	ldi	r18, 0xB8	; 184
     ea0:	3b e0       	ldi	r19, 0x0B	; 11
  bool restart = false;
     ea2:	50 e0       	ldi	r21, 0x00	; 0
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
     ea4:	61 e0       	ldi	r22, 0x01	; 1
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
     ea6:	40 81       	ld	r20, Z
     ea8:	44 23       	and	r20, r20
     eaa:	19 f0       	breq	.+6      	; 0xeb2 <nwkRxDuplicateRejectionTimerHandler+0x18>
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
     eac:	41 50       	subi	r20, 0x01	; 1
     eae:	40 83       	st	Z, r20
      restart = true;
     eb0:	56 2f       	mov	r21, r22
     eb2:	35 96       	adiw	r30, 0x05	; 5
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     eb4:	e2 17       	cp	r30, r18
     eb6:	f3 07       	cpc	r31, r19
     eb8:	b1 f7       	brne	.-20     	; 0xea6 <nwkRxDuplicateRejectionTimerHandler+0xc>
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    }
  }

  if (restart)
     eba:	51 11       	cpse	r21, r1
    SYS_TimerStart(timer);
     ebc:	0e 94 a0 01 	call	0x340	; 0x340 <SYS_TimerStart>
     ec0:	08 95       	ret

00000ec2 <nwkRxInit>:

/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
     ec2:	ee eb       	ldi	r30, 0xBE	; 190
     ec4:	fa e0       	ldi	r31, 0x0A	; 10
     ec6:	88 eb       	ldi	r24, 0xB8	; 184
     ec8:	9b e0       	ldi	r25, 0x0B	; 11
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    nwkRxDuplicateRejectionTable[i].ttl = 0;
     eca:	10 82       	st	Z, r1
     ecc:	35 96       	adiw	r30, 0x05	; 5
/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     ece:	e8 17       	cp	r30, r24
     ed0:	f9 07       	cpc	r31, r25
     ed2:	d9 f7       	brne	.-10     	; 0xeca <nwkRxInit+0x8>
    nwkRxDuplicateRejectionTable[i].ttl = 0;

  nwkRxDuplicateRejectionTimer.interval = NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
     ed4:	84 e6       	ldi	r24, 0x64	; 100
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	a0 e0       	ldi	r26, 0x00	; 0
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	80 93 b2 0a 	sts	0x0AB2, r24
     ee0:	90 93 b3 0a 	sts	0x0AB3, r25
     ee4:	a0 93 b4 0a 	sts	0x0AB4, r26
     ee8:	b0 93 b5 0a 	sts	0x0AB5, r27
  nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
     eec:	10 92 b6 0a 	sts	0x0AB6, r1
  nwkRxDuplicateRejectionTimer.handler = nwkRxDuplicateRejectionTimerHandler;
     ef0:	8d e4       	ldi	r24, 0x4D	; 77
     ef2:	97 e0       	ldi	r25, 0x07	; 7
     ef4:	90 93 b8 0a 	sts	0x0AB8, r25
     ef8:	80 93 b7 0a 	sts	0x0AB7, r24

  NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxServiceDataInd);
     efc:	63 e3       	ldi	r22, 0x33	; 51
     efe:	77 e0       	ldi	r23, 0x07	; 7
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	0e 94 97 03 	call	0x72e	; 0x72e <NWK_OpenEndpoint>
     f06:	08 95       	ret

00000f08 <PHY_DataInd>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataInd(PHY_DataInd_t *ind)
{
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
     f0c:	ec 01       	movw	r28, r24
  NwkFrame_t *frame;

  if (0x88 != ind->data[1] || (0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
     f0e:	e8 81       	ld	r30, Y
     f10:	f9 81       	ldd	r31, Y+1	; 0x01
     f12:	81 81       	ldd	r24, Z+1	; 0x01
     f14:	88 38       	cpi	r24, 0x88	; 136
     f16:	f1 f4       	brne	.+60     	; 0xf54 <PHY_DataInd+0x4c>
     f18:	80 81       	ld	r24, Z
     f1a:	8f 7d       	andi	r24, 0xDF	; 223
     f1c:	81 34       	cpi	r24, 0x41	; 65
     f1e:	d1 f4       	brne	.+52     	; 0xf54 <PHY_DataInd+0x4c>
     f20:	8a 81       	ldd	r24, Y+2	; 0x02
     f22:	80 31       	cpi	r24, 0x10	; 16
     f24:	b8 f0       	brcs	.+46     	; 0xf54 <PHY_DataInd+0x4c>
      ind->size < sizeof(NwkFrameHeader_t))
    return;

  if (NULL == (frame = nwkFrameAlloc()))
     f26:	0e 94 df 04 	call	0x9be	; 0x9be <nwkFrameAlloc>
     f2a:	00 97       	sbiw	r24, 0x00	; 0
     f2c:	99 f0       	breq	.+38     	; 0xf54 <PHY_DataInd+0x4c>
    return;

  frame->state = NWK_RX_STATE_RECEIVED;
     f2e:	20 e2       	ldi	r18, 0x20	; 32
     f30:	fc 01       	movw	r30, r24
     f32:	20 83       	st	Z, r18
  frame->size = ind->size;
     f34:	2a 81       	ldd	r18, Y+2	; 0x02
     f36:	21 83       	std	Z+1, r18	; 0x01
  frame->rx.lqi = ind->lqi;
     f38:	2b 81       	ldd	r18, Y+3	; 0x03
     f3a:	ed 57       	subi	r30, 0x7D	; 125
     f3c:	ff 4f       	sbci	r31, 0xFF	; 255
     f3e:	20 83       	st	Z, r18
  frame->rx.rssi = ind->rssi;
     f40:	2c 81       	ldd	r18, Y+4	; 0x04
     f42:	31 96       	adiw	r30, 0x01	; 1
     f44:	20 83       	st	Z, r18
  memcpy(frame->data, ind->data, ind->size);
     f46:	4a 81       	ldd	r20, Y+2	; 0x02
     f48:	50 e0       	ldi	r21, 0x00	; 0
     f4a:	68 81       	ld	r22, Y
     f4c:	79 81       	ldd	r23, Y+1	; 0x01
     f4e:	02 96       	adiw	r24, 0x02	; 2
     f50:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <memcpy>
}
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	08 95       	ret

00000f5a <NWK_SetAckControl>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
     f5a:	80 93 b9 0a 	sts	0x0AB9, r24
     f5e:	08 95       	ret

00000f60 <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
     f60:	2f 92       	push	r2
     f62:	3f 92       	push	r3
     f64:	4f 92       	push	r4
     f66:	5f 92       	push	r5
     f68:	6f 92       	push	r6
     f6a:	7f 92       	push	r7
     f6c:	8f 92       	push	r8
     f6e:	9f 92       	push	r9
     f70:	af 92       	push	r10
     f72:	bf 92       	push	r11
     f74:	cf 92       	push	r12
     f76:	df 92       	push	r13
     f78:	ef 92       	push	r14
     f7a:	ff 92       	push	r15
     f7c:	0f 93       	push	r16
     f7e:	1f 93       	push	r17
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	2c 97       	sbiw	r28, 0x0c	; 12
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	f8 94       	cli
     f8e:	de bf       	out	0x3e, r29	; 62
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	cd bf       	out	0x3d, r28	; 61
  NwkFrame_t *frame = NULL;
     f94:	00 e0       	ldi	r16, 0x00	; 0
     f96:	10 e0       	ldi	r17, 0x00	; 0
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
     f98:	0f 2e       	mov	r0, r31
     f9a:	f4 e2       	ldi	r31, 0x24	; 36
     f9c:	7f 2e       	mov	r7, r31
     f9e:	f0 2d       	mov	r31, r0
    ack = true;

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
     fa0:	0f 2e       	mov	r0, r31
     fa2:	f9 e8       	ldi	r31, 0x89	; 137
     fa4:	cf 2e       	mov	r12, r31
     fa6:	fc e0       	ldi	r31, 0x0C	; 12
     fa8:	df 2e       	mov	r13, r31
     faa:	f0 2d       	mov	r31, r0

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
     fac:	68 94       	set
     fae:	22 24       	eor	r2, r2
     fb0:	22 f8       	bld	r2, 2
     fb2:	0f 2e       	mov	r0, r31
     fb4:	fa eb       	ldi	r31, 0xBA	; 186
     fb6:	af 2e       	mov	r10, r31
     fb8:	fa e0       	ldi	r31, 0x0A	; 10
     fba:	bf 2e       	mov	r11, r31
     fbc:	f0 2d       	mov	r31, r0
     fbe:	0f 2e       	mov	r0, r31
     fc0:	f4 eb       	ldi	r31, 0xB4	; 180
     fc2:	ef 2e       	mov	r14, r31
     fc4:	fb e0       	ldi	r31, 0x0B	; 11
     fc6:	ff 2e       	mov	r15, r31
     fc8:	f0 2d       	mov	r31, r0
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
     fca:	31 2c       	mov	r3, r1
     fcc:	61 2c       	mov	r6, r1
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
     fce:	44 24       	eor	r4, r4
     fd0:	43 94       	inc	r4
     fd2:	51 2c       	mov	r5, r1
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
     fd4:	b5 c1       	rjmp	.+874    	; 0x1340 <nwkRxTaskHandler+0x3e0>
  {
    switch (frame->state)
     fd6:	d8 01       	movw	r26, r16
     fd8:	8c 91       	ld	r24, X
     fda:	82 32       	cpi	r24, 0x22	; 34
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <nwkRxTaskHandler+0x80>
     fde:	dc c0       	rjmp	.+440    	; 0x1198 <nwkRxTaskHandler+0x238>
     fe0:	18 f4       	brcc	.+6      	; 0xfe8 <nwkRxTaskHandler+0x88>
     fe2:	80 32       	cpi	r24, 0x20	; 32
     fe4:	41 f0       	breq	.+16     	; 0xff6 <nwkRxTaskHandler+0x96>
     fe6:	ac c1       	rjmp	.+856    	; 0x1340 <nwkRxTaskHandler+0x3e0>
     fe8:	83 32       	cpi	r24, 0x23	; 35
     fea:	09 f4       	brne	.+2      	; 0xfee <nwkRxTaskHandler+0x8e>
     fec:	a2 c1       	rjmp	.+836    	; 0x1332 <nwkRxTaskHandler+0x3d2>
     fee:	84 32       	cpi	r24, 0x24	; 36
     ff0:	09 f4       	brne	.+2      	; 0xff4 <nwkRxTaskHandler+0x94>
     ff2:	a3 c1       	rjmp	.+838    	; 0x133a <nwkRxTaskHandler+0x3da>
     ff4:	a5 c1       	rjmp	.+842    	; 0x1340 <nwkRxTaskHandler+0x3e0>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;

  frame->state = NWK_RX_STATE_FINISH;
     ff6:	f8 01       	movw	r30, r16
     ff8:	70 82       	st	Z, r7

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
     ffa:	23 85       	ldd	r18, Z+11	; 0x0b
     ffc:	82 2f       	mov	r24, r18
     ffe:	8a 70       	andi	r24, 0x0A	; 10

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
    1000:	09 f0       	breq	.+2      	; 0x1004 <nwkRxTaskHandler+0xa4>
    1002:	9e c1       	rjmp	.+828    	; 0x1340 <nwkRxTaskHandler+0x3e0>
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    1004:	85 81       	ldd	r24, Z+5	; 0x05
    1006:	96 81       	ldd	r25, Z+6	; 0x06
    1008:	01 96       	adiw	r24, 0x01	; 1
    100a:	91 f4       	brne	.+36     	; 0x1030 <nwkRxTaskHandler+0xd0>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    100c:	d8 01       	movw	r26, r16
    100e:	1f 96       	adiw	r26, 0x0f	; 15
    1010:	8d 91       	ld	r24, X+
    1012:	9c 91       	ld	r25, X
    1014:	50 97       	sbiw	r26, 0x10	; 16
    1016:	f6 01       	movw	r30, r12
    1018:	20 81       	ld	r18, Z
    101a:	31 81       	ldd	r19, Z+1	; 0x01
    101c:	28 17       	cp	r18, r24
    101e:	39 07       	cpc	r19, r25
    1020:	19 f0       	breq	.+6      	; 0x1028 <nwkRxTaskHandler+0xc8>
    1022:	01 96       	adiw	r24, 0x01	; 1
    1024:	09 f0       	breq	.+2      	; 0x1028 <nwkRxTaskHandler+0xc8>
    1026:	8c c1       	rjmp	.+792    	; 0x1340 <nwkRxTaskHandler+0x3e0>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    1028:	e2 e2       	ldi	r30, 0x22	; 34
    102a:	d8 01       	movw	r26, r16
    102c:	ec 93       	st	X, r30
    102e:	88 c1       	rjmp	.+784    	; 0x1340 <nwkRxTaskHandler+0x3e0>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
    1030:	d8 01       	movw	r26, r16
    1032:	1f 96       	adiw	r26, 0x0f	; 15
    1034:	8d 91       	ld	r24, X+
    1036:	9c 91       	ld	r25, X
    1038:	50 97       	sbiw	r26, 0x10	; 16
    103a:	01 96       	adiw	r24, 0x01	; 1
    103c:	11 f4       	brne	.+4      	; 0x1042 <nwkRxTaskHandler+0xe2>
    103e:	20 fd       	sbrc	r18, 0
    1040:	7f c1       	rjmp	.+766    	; 0x1340 <nwkRxTaskHandler+0x3e0>
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
    1042:	f6 01       	movw	r30, r12
    1044:	20 81       	ld	r18, Z
    1046:	31 81       	ldd	r19, Z+1	; 0x01
    1048:	d8 01       	movw	r26, r16
    104a:	1d 96       	adiw	r26, 0x0d	; 13
    104c:	8d 91       	ld	r24, X+
    104e:	9c 91       	ld	r25, X
    1050:	1e 97       	sbiw	r26, 0x0e	; 14
    1052:	28 17       	cp	r18, r24
    1054:	39 07       	cpc	r19, r25
    1056:	09 f4       	brne	.+2      	; 0x105a <nwkRxTaskHandler+0xfa>
    1058:	73 c1       	rjmp	.+742    	; 0x1340 <nwkRxTaskHandler+0x3e0>
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
    105a:	c8 01       	movw	r24, r16
    105c:	0e 94 16 06 	call	0xc2c	; 0xc2c <nwkRouteFrameReceived>
    1060:	f5 01       	movw	r30, r10
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    1062:	43 2d       	mov	r20, r3
    1064:	56 2d       	mov	r21, r6

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];

    if (entry->ttl && header->nwkSrcAddr == entry->src)
    1066:	84 81       	ldd	r24, Z+4	; 0x04
    1068:	88 23       	and	r24, r24
    106a:	09 f4       	brne	.+2      	; 0x106e <nwkRxTaskHandler+0x10e>
    106c:	4d c0       	rjmp	.+154    	; 0x1108 <nwkRxTaskHandler+0x1a8>
    106e:	d8 01       	movw	r26, r16
    1070:	1d 96       	adiw	r26, 0x0d	; 13
    1072:	2d 91       	ld	r18, X+
    1074:	3c 91       	ld	r19, X
    1076:	1e 97       	sbiw	r26, 0x0e	; 14
    1078:	80 81       	ld	r24, Z
    107a:	91 81       	ldd	r25, Z+1	; 0x01
    107c:	28 17       	cp	r18, r24
    107e:	39 07       	cpc	r19, r25
    1080:	09 f0       	breq	.+2      	; 0x1084 <nwkRxTaskHandler+0x124>
    1082:	43 c0       	rjmp	.+134    	; 0x110a <nwkRxTaskHandler+0x1aa>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    1084:	1c 96       	adiw	r26, 0x0c	; 12
    1086:	9c 91       	ld	r25, X
    1088:	1c 97       	sbiw	r26, 0x0c	; 12
    108a:	42 81       	ldd	r20, Z+2	; 0x02
    108c:	49 1b       	sub	r20, r25

      if (diff < 8)
    108e:	48 30       	cpi	r20, 0x08	; 8
    1090:	60 f5       	brcc	.+88     	; 0x10ea <nwkRxTaskHandler+0x18a>
      {
        if (entry->mask & (1 << diff))
    1092:	23 81       	ldd	r18, Z+3	; 0x03
    1094:	82 2f       	mov	r24, r18
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	04 2e       	mov	r0, r20
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <nwkRxTaskHandler+0x140>
    109c:	95 95       	asr	r25
    109e:	87 95       	ror	r24
    10a0:	0a 94       	dec	r0
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <nwkRxTaskHandler+0x13c>
    10a4:	80 ff       	sbrs	r24, 0
    10a6:	18 c0       	rjmp	.+48     	; 0x10d8 <nwkRxTaskHandler+0x178>
        {
        #ifdef NWK_ENABLE_ROUTING
          if (nwkIb.addr == header->macDstAddr)
    10a8:	f6 01       	movw	r30, r12
    10aa:	20 81       	ld	r18, Z
    10ac:	31 81       	ldd	r19, Z+1	; 0x01
    10ae:	17 96       	adiw	r26, 0x07	; 7
    10b0:	8d 91       	ld	r24, X+
    10b2:	9c 91       	ld	r25, X
    10b4:	18 97       	sbiw	r26, 0x08	; 8
    10b6:	28 17       	cp	r18, r24
    10b8:	39 07       	cpc	r19, r25
    10ba:	09 f0       	breq	.+2      	; 0x10be <nwkRxTaskHandler+0x15e>
    10bc:	41 c1       	rjmp	.+642    	; 0x1340 <nwkRxTaskHandler+0x3e0>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
    10be:	1b 96       	adiw	r26, 0x0b	; 11
    10c0:	6c 91       	ld	r22, X
    10c2:	1b 97       	sbiw	r26, 0x0b	; 11
    10c4:	63 fb       	bst	r22, 3
    10c6:	66 27       	eor	r22, r22
    10c8:	60 f9       	bld	r22, 0
    10ca:	1f 96       	adiw	r26, 0x0f	; 15
    10cc:	8d 91       	ld	r24, X+
    10ce:	9c 91       	ld	r25, X
    10d0:	50 97       	sbiw	r26, 0x10	; 16
    10d2:	0e 94 0f 06 	call	0xc1e	; 0xc1e <nwkRouteRemove>
    10d6:	34 c1       	rjmp	.+616    	; 0x1340 <nwkRxTaskHandler+0x3e0>
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
    10d8:	c2 01       	movw	r24, r4
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <nwkRxTaskHandler+0x180>
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	4a 95       	dec	r20
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <nwkRxTaskHandler+0x17c>
    10e4:	82 2b       	or	r24, r18
    10e6:	83 83       	std	Z+3, r24	; 0x03
    10e8:	33 c1       	rjmp	.+614    	; 0x1350 <nwkRxTaskHandler+0x3f0>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;

        entry->seq = header->nwkSeq;
    10ea:	92 83       	std	Z+2, r25	; 0x02
        entry->mask = (entry->mask << shift) | 1;
    10ec:	23 81       	ldd	r18, Z+3	; 0x03
    10ee:	30 e0       	ldi	r19, 0x00	; 0
        entry->mask |= (1 << diff);
        return false;
      }
      else
      {
        uint8_t shift = -(int8_t)diff;
    10f0:	41 95       	neg	r20

        entry->seq = header->nwkSeq;
        entry->mask = (entry->mask << shift) | 1;
    10f2:	c9 01       	movw	r24, r18
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <nwkRxTaskHandler+0x19a>
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	4a 95       	dec	r20
    10fc:	e2 f7       	brpl	.-8      	; 0x10f6 <nwkRxTaskHandler+0x196>
    10fe:	81 60       	ori	r24, 0x01	; 1
    1100:	83 83       	std	Z+3, r24	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
    1102:	85 e1       	ldi	r24, 0x15	; 21
    1104:	84 83       	std	Z+4, r24	; 0x04
    1106:	24 c1       	rjmp	.+584    	; 0x1350 <nwkRxTaskHandler+0x3f0>
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
    1108:	af 01       	movw	r20, r30
    110a:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    110c:	ee 15       	cp	r30, r14
    110e:	ff 05       	cpc	r31, r15
    1110:	09 f0       	breq	.+2      	; 0x1114 <nwkRxTaskHandler+0x1b4>
    1112:	a9 cf       	rjmp	.-174    	; 0x1066 <nwkRxTaskHandler+0x106>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
    1114:	41 15       	cp	r20, r1
    1116:	51 05       	cpc	r21, r1
    1118:	09 f4       	brne	.+2      	; 0x111c <nwkRxTaskHandler+0x1bc>
    111a:	12 c1       	rjmp	.+548    	; 0x1340 <nwkRxTaskHandler+0x3e0>
    return true;

  freeEntry->src = header->nwkSrcAddr;
    111c:	d8 01       	movw	r26, r16
    111e:	1d 96       	adiw	r26, 0x0d	; 13
    1120:	8d 91       	ld	r24, X+
    1122:	9c 91       	ld	r25, X
    1124:	1e 97       	sbiw	r26, 0x0e	; 14
    1126:	fa 01       	movw	r30, r20
    1128:	91 83       	std	Z+1, r25	; 0x01
    112a:	80 83       	st	Z, r24
  freeEntry->seq = header->nwkSeq;
    112c:	1c 96       	adiw	r26, 0x0c	; 12
    112e:	8c 91       	ld	r24, X
    1130:	82 83       	std	Z+2, r24	; 0x02
  freeEntry->mask = 1;
    1132:	21 e0       	ldi	r18, 0x01	; 1
    1134:	23 83       	std	Z+3, r18	; 0x03
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    1136:	85 e1       	ldi	r24, 0x15	; 21
    1138:	84 83       	std	Z+4, r24	; 0x04

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    113a:	8c ea       	ldi	r24, 0xAC	; 172
    113c:	9a e0       	ldi	r25, 0x0A	; 10
    113e:	0e 94 a0 01 	call	0x340	; 0x340 <SYS_TimerStart>
    1142:	06 c1       	rjmp	.+524    	; 0x1350 <nwkRxTaskHandler+0x3f0>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    1144:	d6 01       	movw	r26, r12
    1146:	2d 91       	ld	r18, X+
    1148:	3c 91       	ld	r19, X
    114a:	f8 01       	movw	r30, r16
    114c:	87 85       	ldd	r24, Z+15	; 0x0f
    114e:	90 89       	ldd	r25, Z+16	; 0x10
    1150:	28 17       	cp	r18, r24
    1152:	39 07       	cpc	r19, r25
    1154:	89 f0       	breq	.+34     	; 0x1178 <nwkRxTaskHandler+0x218>
        0 == header->nwkFcf.linkLocal)
    1156:	43 85       	ldd	r20, Z+11	; 0x0b
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    1158:	42 fd       	sbrc	r20, 2
    115a:	0c c0       	rjmp	.+24     	; 0x1174 <nwkRxTaskHandler+0x214>
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
    115c:	c8 01       	movw	r24, r16
    115e:	0e 94 b1 0a 	call	0x1562	; 0x1562 <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    1162:	d6 01       	movw	r26, r12
    1164:	2d 91       	ld	r18, X+
    1166:	3c 91       	ld	r19, X
    1168:	f8 01       	movw	r30, r16
    116a:	87 85       	ldd	r24, Z+15	; 0x0f
    116c:	90 89       	ldd	r25, Z+16	; 0x10
    116e:	28 17       	cp	r18, r24
    1170:	39 07       	cpc	r19, r25
    1172:	11 f0       	breq	.+4      	; 0x1178 <nwkRxTaskHandler+0x218>
    1174:	01 96       	adiw	r24, 0x01	; 1
    1176:	21 f4       	brne	.+8      	; 0x1180 <nwkRxTaskHandler+0x220>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    1178:	e2 e2       	ldi	r30, 0x22	; 34
    117a:	d8 01       	movw	r26, r16
    117c:	ec 93       	st	X, r30
    117e:	e0 c0       	rjmp	.+448    	; 0x1340 <nwkRxTaskHandler+0x3e0>
    }

  #ifdef NWK_ENABLE_ROUTING
    else if (nwkIb.addr == header->macDstAddr)
    1180:	d8 01       	movw	r26, r16
    1182:	17 96       	adiw	r26, 0x07	; 7
    1184:	8d 91       	ld	r24, X+
    1186:	9c 91       	ld	r25, X
    1188:	18 97       	sbiw	r26, 0x08	; 8
    118a:	28 17       	cp	r18, r24
    118c:	39 07       	cpc	r19, r25
    118e:	09 f0       	breq	.+2      	; 0x1192 <nwkRxTaskHandler+0x232>
    1190:	d7 c0       	rjmp	.+430    	; 0x1340 <nwkRxTaskHandler+0x3e0>
    {
      frame->state = NWK_RX_STATE_ROUTE;
    1192:	e3 e2       	ldi	r30, 0x23	; 35
    1194:	ec 93       	st	X, r30
    1196:	d4 c0       	rjmp	.+424    	; 0x1340 <nwkRxTaskHandler+0x3e0>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
  bool ack;

  nwkRxAckControl = 0;
    1198:	10 92 b9 0a 	sts	0x0AB9, r1
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    119c:	d8 01       	movw	r26, r16
    119e:	51 96       	adiw	r26, 0x11	; 17
    11a0:	4c 91       	ld	r20, X
    11a2:	51 97       	sbiw	r26, 0x11	; 17
    11a4:	42 95       	swap	r20
    11a6:	4f 70       	andi	r20, 0x0F	; 15
    11a8:	e4 2f       	mov	r30, r20
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	ee 0f       	add	r30, r30
    11ae:	ff 1f       	adc	r31, r31
    11b0:	e1 57       	subi	r30, 0x71	; 113
    11b2:	f3 4f       	sbci	r31, 0xF3	; 243
    11b4:	01 90       	ld	r0, Z+
    11b6:	f0 81       	ld	r31, Z
    11b8:	e0 2d       	mov	r30, r0
    11ba:	30 97       	sbiw	r30, 0x00	; 0
    11bc:	09 f4       	brne	.+2      	; 0x11c0 <nwkRxTaskHandler+0x260>
    11be:	5f c0       	rjmp	.+190    	; 0x127e <nwkRxTaskHandler+0x31e>
    return false;

  ind.srcAddr = header->nwkSrcAddr;
    11c0:	1d 96       	adiw	r26, 0x0d	; 13
    11c2:	8d 91       	ld	r24, X+
    11c4:	9c 91       	ld	r25, X
    11c6:	1e 97       	sbiw	r26, 0x0e	; 14
    11c8:	9a 83       	std	Y+2, r25	; 0x02
    11ca:	89 83       	std	Y+1, r24	; 0x01
  ind.dstAddr = header->nwkDstAddr;
    11cc:	1f 96       	adiw	r26, 0x0f	; 15
    11ce:	2d 91       	ld	r18, X+
    11d0:	3c 91       	ld	r19, X
    11d2:	50 97       	sbiw	r26, 0x10	; 16
    11d4:	3c 83       	std	Y+4, r19	; 0x04
    11d6:	2b 83       	std	Y+3, r18	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
    11d8:	51 96       	adiw	r26, 0x11	; 17
    11da:	5c 91       	ld	r21, X
    11dc:	51 97       	sbiw	r26, 0x11	; 17
    11de:	5f 70       	andi	r21, 0x0F	; 15
    11e0:	5d 83       	std	Y+5, r21	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
    11e2:	4e 83       	std	Y+6, r20	; 0x06
  ind.data = frame->payload;
    11e4:	af 57       	subi	r26, 0x7F	; 127
    11e6:	bf 4f       	sbci	r27, 0xFF	; 255
    11e8:	4d 91       	ld	r20, X+
    11ea:	5c 91       	ld	r21, X
    11ec:	59 87       	std	Y+9, r21	; 0x09
    11ee:	48 87       	std	Y+8, r20	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
  return frame->size - (frame->payload - frame->data);
    11f0:	b8 01       	movw	r22, r16
    11f2:	6e 5f       	subi	r22, 0xFE	; 254
    11f4:	7f 4f       	sbci	r23, 0xFF	; 255
    11f6:	64 1b       	sub	r22, r20
    11f8:	75 0b       	sbc	r23, r21
    11fa:	d8 01       	movw	r26, r16
    11fc:	11 96       	adiw	r26, 0x01	; 1
    11fe:	4c 91       	ld	r20, X
    1200:	11 97       	sbiw	r26, 0x01	; 1
    1202:	64 0f       	add	r22, r20
  ind.size = nwkFramePayloadSize(frame);
    1204:	6a 87       	std	Y+10, r22	; 0x0a
  ind.lqi = frame->rx.lqi;
    1206:	ad 57       	subi	r26, 0x7D	; 125
    1208:	bf 4f       	sbci	r27, 0xFF	; 255
    120a:	4c 91       	ld	r20, X
    120c:	4b 87       	std	Y+11, r20	; 0x0b
  ind.rssi = frame->rx.rssi;
    120e:	11 96       	adiw	r26, 0x01	; 1
    1210:	4c 91       	ld	r20, X
    1212:	4c 87       	std	Y+12, r20	; 0x0c

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    1214:	d8 01       	movw	r26, r16
    1216:	1b 96       	adiw	r26, 0x0b	; 11
    1218:	4c 91       	ld	r20, X
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    121a:	54 2f       	mov	r21, r20
    121c:	53 70       	andi	r21, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    121e:	42 ff       	sbrs	r20, 2
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <nwkRxTaskHandler+0x2c6>
    1222:	60 e2       	ldi	r22, 0x20	; 32
    1224:	01 c0       	rjmp	.+2      	; 0x1228 <nwkRxTaskHandler+0x2c8>
    1226:	60 e0       	ldi	r22, 0x00	; 0
    1228:	56 2b       	or	r21, r22
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    122a:	43 ff       	sbrs	r20, 3
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <nwkRxTaskHandler+0x2d2>
    122e:	40 e4       	ldi	r20, 0x40	; 64
    1230:	01 c0       	rjmp	.+2      	; 0x1234 <nwkRxTaskHandler+0x2d4>
    1232:	40 e0       	ldi	r20, 0x00	; 0
    1234:	45 2b       	or	r20, r21
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    1236:	2f 3f       	cpi	r18, 0xFF	; 255
    1238:	3f 4f       	sbci	r19, 0xFF	; 255
    123a:	11 f4       	brne	.+4      	; 0x1240 <nwkRxTaskHandler+0x2e0>
    123c:	22 2d       	mov	r18, r2
    123e:	01 c0       	rjmp	.+2      	; 0x1242 <nwkRxTaskHandler+0x2e2>
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	42 2b       	or	r20, r18
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    1244:	d8 01       	movw	r26, r16
    1246:	19 96       	adiw	r26, 0x09	; 9
    1248:	2d 91       	ld	r18, X+
    124a:	3c 91       	ld	r19, X
    124c:	1a 97       	sbiw	r26, 0x0a	; 10
    124e:	82 17       	cp	r24, r18
    1250:	93 07       	cpc	r25, r19
    1252:	11 f4       	brne	.+4      	; 0x1258 <nwkRxTaskHandler+0x2f8>
    1254:	28 e0       	ldi	r18, 0x08	; 8
    1256:	01 c0       	rjmp	.+2      	; 0x125a <nwkRxTaskHandler+0x2fa>
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	24 2b       	or	r18, r20
    125c:	2f 83       	std	Y+7, r18	; 0x07
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    125e:	d8 01       	movw	r26, r16
    1260:	15 96       	adiw	r26, 0x05	; 5
    1262:	8d 91       	ld	r24, X+
    1264:	9c 91       	ld	r25, X
    1266:	16 97       	sbiw	r26, 0x06	; 6
    1268:	01 96       	adiw	r24, 0x01	; 1
    126a:	11 f4       	brne	.+4      	; 0x1270 <nwkRxTaskHandler+0x310>
    126c:	80 e1       	ldi	r24, 0x10	; 16
    126e:	01 c0       	rjmp	.+2      	; 0x1272 <nwkRxTaskHandler+0x312>
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	28 2b       	or	r18, r24
    1274:	2f 83       	std	Y+7, r18	; 0x07

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    1276:	ce 01       	movw	r24, r28
    1278:	01 96       	adiw	r24, 0x01	; 1
    127a:	19 95       	eicall
    127c:	01 c0       	rjmp	.+2      	; 0x1280 <nwkRxTaskHandler+0x320>
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
    127e:	80 e0       	ldi	r24, 0x00	; 0
  bool ack;

  nwkRxAckControl = 0;
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
    1280:	f8 01       	movw	r30, r16
    1282:	93 85       	ldd	r25, Z+11	; 0x0b
    1284:	90 ff       	sbrs	r25, 0
    ack = false;
    1286:	80 e0       	ldi	r24, 0x00	; 0

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    1288:	d8 01       	movw	r26, r16
    128a:	17 96       	adiw	r26, 0x07	; 7
    128c:	2d 91       	ld	r18, X+
    128e:	3c 91       	ld	r19, X
    1290:	18 97       	sbiw	r26, 0x08	; 8
    1292:	2f 3f       	cpi	r18, 0xFF	; 255
    1294:	3f 4f       	sbci	r19, 0xFF	; 255
    1296:	69 f4       	brne	.+26     	; 0x12b2 <nwkRxTaskHandler+0x352>
    1298:	f6 01       	movw	r30, r12
    129a:	40 81       	ld	r20, Z
    129c:	51 81       	ldd	r21, Z+1	; 0x01
    129e:	d8 01       	movw	r26, r16
    12a0:	1f 96       	adiw	r26, 0x0f	; 15
    12a2:	2d 91       	ld	r18, X+
    12a4:	3c 91       	ld	r19, X
    12a6:	50 97       	sbiw	r26, 0x10	; 16
    12a8:	42 17       	cp	r20, r18
    12aa:	53 07       	cpc	r21, r19
    12ac:	11 f4       	brne	.+4      	; 0x12b2 <nwkRxTaskHandler+0x352>
      nwkIb.addr == frame->header.nwkDstAddr &&
    12ae:	93 ff       	sbrs	r25, 3
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    12b0:	81 e0       	ldi	r24, 0x01	; 1

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    12b2:	f8 01       	movw	r30, r16
    12b4:	25 81       	ldd	r18, Z+5	; 0x05
    12b6:	36 81       	ldd	r19, Z+6	; 0x06
    12b8:	2f 3f       	cpi	r18, 0xFF	; 255
    12ba:	3f 4f       	sbci	r19, 0xFF	; 255
    12bc:	b9 f1       	breq	.+110    	; 0x132c <nwkRxTaskHandler+0x3cc>
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    12be:	d6 01       	movw	r26, r12
    12c0:	2d 91       	ld	r18, X+
    12c2:	3c 91       	ld	r19, X
    12c4:	2f 3f       	cpi	r18, 0xFF	; 255
    12c6:	3f 4f       	sbci	r19, 0xFF	; 255
    12c8:	89 f1       	breq	.+98     	; 0x132c <nwkRxTaskHandler+0x3cc>
    ack = false;

  if (ack)
    12ca:	88 23       	and	r24, r24
    12cc:	79 f1       	breq	.+94     	; 0x132c <nwkRxTaskHandler+0x3cc>
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
    12ce:	0e 94 df 04 	call	0x9be	; 0x9be <nwkFrameAlloc>
    12d2:	4c 01       	movw	r8, r24
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    12d6:	51 f1       	breq	.+84     	; 0x132c <nwkRxTaskHandler+0x3cc>
    return;

  nwkFrameCommandInit(ack);
    12d8:	0e 94 45 05 	call	0xa8a	; 0xa8a <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
    12dc:	f4 01       	movw	r30, r8
    12de:	81 81       	ldd	r24, Z+1	; 0x01
    12e0:	8d 5f       	subi	r24, 0xFD	; 253
    12e2:	81 83       	std	Z+1, r24	; 0x01
  ack->tx.confirm = NULL;
    12e4:	e9 57       	subi	r30, 0x79	; 121
    12e6:	ff 4f       	sbci	r31, 0xFF	; 255
    12e8:	11 82       	std	Z+1, r1	; 0x01
    12ea:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    12ec:	d8 01       	movw	r26, r16
    12ee:	1b 96       	adiw	r26, 0x0b	; 11
    12f0:	9c 91       	ld	r25, X
    12f2:	1b 97       	sbiw	r26, 0x0b	; 11
    12f4:	96 95       	lsr	r25
    12f6:	91 70       	andi	r25, 0x01	; 1
    12f8:	f4 01       	movw	r30, r8
    12fa:	83 85       	ldd	r24, Z+11	; 0x0b
    12fc:	90 fb       	bst	r25, 0
    12fe:	81 f9       	bld	r24, 1
    1300:	83 87       	std	Z+11, r24	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    1302:	1d 96       	adiw	r26, 0x0d	; 13
    1304:	8d 91       	ld	r24, X+
    1306:	9c 91       	ld	r25, X
    1308:	1e 97       	sbiw	r26, 0x0e	; 14
    130a:	90 8b       	std	Z+16, r25	; 0x10
    130c:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
    130e:	ef 57       	subi	r30, 0x7F	; 127
    1310:	ff 4f       	sbci	r31, 0xFF	; 255
    1312:	01 90       	ld	r0, Z+
    1314:	f0 81       	ld	r31, Z
    1316:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ACK;
    1318:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
    131a:	80 91 b9 0a 	lds	r24, 0x0AB9
    131e:	82 83       	std	Z+2, r24	; 0x02
  command->seq = frame->header.nwkSeq;
    1320:	1c 96       	adiw	r26, 0x0c	; 12
    1322:	8c 91       	ld	r24, X
    1324:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(ack);
    1326:	c4 01       	movw	r24, r8
    1328:	0e 94 5f 0a 	call	0x14be	; 0x14be <nwkTxFrame>
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    132c:	d8 01       	movw	r26, r16
    132e:	7c 92       	st	X, r7
    1330:	07 c0       	rjmp	.+14     	; 0x1340 <nwkRxTaskHandler+0x3e0>
      } break;

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    1332:	c8 01       	movw	r24, r16
    1334:	0e 94 cf 06 	call	0xd9e	; 0xd9e <nwkRouteFrame>
      } break;
    1338:	03 c0       	rjmp	.+6      	; 0x1340 <nwkRxTaskHandler+0x3e0>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    133a:	c8 01       	movw	r24, r16
    133c:	0e 94 16 05 	call	0xa2c	; 0xa2c <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    1340:	c8 01       	movw	r24, r16
    1342:	0e 94 20 05 	call	0xa40	; 0xa40 <nwkFrameNext>
    1346:	8c 01       	movw	r16, r24
    1348:	00 97       	sbiw	r24, 0x00	; 0
    134a:	09 f0       	breq	.+2      	; 0x134e <nwkRxTaskHandler+0x3ee>
    134c:	44 ce       	rjmp	.-888    	; 0xfd6 <nwkRxTaskHandler+0x76>
    134e:	07 c0       	rjmp	.+14     	; 0x135e <nwkRxTaskHandler+0x3fe>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    1350:	f8 01       	movw	r30, r16
    1352:	87 81       	ldd	r24, Z+7	; 0x07
    1354:	90 85       	ldd	r25, Z+8	; 0x08
    1356:	01 96       	adiw	r24, 0x01	; 1
    1358:	09 f0       	breq	.+2      	; 0x135c <nwkRxTaskHandler+0x3fc>
    135a:	03 cf       	rjmp	.-506    	; 0x1162 <nwkRxTaskHandler+0x202>
    135c:	f3 ce       	rjmp	.-538    	; 0x1144 <nwkRxTaskHandler+0x1e4>
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    135e:	2c 96       	adiw	r28, 0x0c	; 12
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	f8 94       	cli
    1364:	de bf       	out	0x3e, r29	; 62
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	cd bf       	out	0x3d, r28	; 61
    136a:	df 91       	pop	r29
    136c:	cf 91       	pop	r28
    136e:	1f 91       	pop	r17
    1370:	0f 91       	pop	r16
    1372:	ff 90       	pop	r15
    1374:	ef 90       	pop	r14
    1376:	df 90       	pop	r13
    1378:	cf 90       	pop	r12
    137a:	bf 90       	pop	r11
    137c:	af 90       	pop	r10
    137e:	9f 90       	pop	r9
    1380:	8f 90       	pop	r8
    1382:	7f 90       	pop	r7
    1384:	6f 90       	pop	r6
    1386:	5f 90       	pop	r5
    1388:	4f 90       	pop	r4
    138a:	3f 90       	pop	r3
    138c:	2f 90       	pop	r2
    138e:	08 95       	ret

00001390 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    1390:	ff 92       	push	r15
    1392:	0f 93       	push	r16
    1394:	1f 93       	push	r17
    1396:	cf 93       	push	r28
    1398:	df 93       	push	r29
    139a:	ec 01       	movw	r28, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
    139c:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
    13a2:	01 e0       	ldi	r16, 0x01	; 1

      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    13a4:	0f 2e       	mov	r0, r31
    13a6:	f3 e1       	ldi	r31, 0x13	; 19
    13a8:	ff 2e       	mov	r15, r31
    13aa:	f0 2d       	mov	r31, r0
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    13ac:	13 c0       	rjmp	.+38     	; 0x13d4 <nwkTxDelayTimerHandler+0x44>
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    13ae:	fc 01       	movw	r30, r24
    13b0:	20 81       	ld	r18, Z
    13b2:	21 31       	cpi	r18, 0x11	; 17
    13b4:	79 f4       	brne	.+30     	; 0x13d4 <nwkTxDelayTimerHandler+0x44>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    13b6:	ec 57       	subi	r30, 0x7C	; 124
    13b8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ba:	20 81       	ld	r18, Z
    13bc:	31 81       	ldd	r19, Z+1	; 0x01
    13be:	21 50       	subi	r18, 0x01	; 1
    13c0:	31 09       	sbc	r19, r1
    13c2:	31 83       	std	Z+1, r19	; 0x01
    13c4:	20 83       	st	Z, r18
    13c6:	23 2b       	or	r18, r19
    13c8:	21 f4       	brne	.+8      	; 0x13d2 <nwkTxDelayTimerHandler+0x42>
        frame->state = NWK_TX_STATE_SEND;
    13ca:	fc 01       	movw	r30, r24
    13cc:	f0 82       	st	Z, r15

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
    13ce:	10 2f       	mov	r17, r16
    13d0:	01 c0       	rjmp	.+2      	; 0x13d4 <nwkTxDelayTimerHandler+0x44>
    13d2:	10 2f       	mov	r17, r16
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    13d4:	0e 94 20 05 	call	0xa40	; 0xa40 <nwkFrameNext>
    13d8:	00 97       	sbiw	r24, 0x00	; 0
    13da:	49 f7       	brne	.-46     	; 0x13ae <nwkTxDelayTimerHandler+0x1e>
      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    }
  }

  if (restart)
    13dc:	11 23       	and	r17, r17
    13de:	19 f0       	breq	.+6      	; 0x13e6 <nwkTxDelayTimerHandler+0x56>
    SYS_TimerStart(timer);
    13e0:	ce 01       	movw	r24, r28
    13e2:	0e 94 a0 01 	call	0x340	; 0x340 <SYS_TimerStart>
}
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
    13ea:	1f 91       	pop	r17
    13ec:	0f 91       	pop	r16
    13ee:	ff 90       	pop	r15
    13f0:	08 95       	ret

000013f2 <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    13f2:	ef 92       	push	r14
    13f4:	ff 92       	push	r15
    13f6:	0f 93       	push	r16
    13f8:	1f 93       	push	r17
    13fa:	cf 93       	push	r28
    13fc:	df 93       	push	r29
    13fe:	ec 01       	movw	r28, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
    1400:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
    1406:	01 e0       	ldi	r16, 0x01	; 1

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
    1408:	0f 2e       	mov	r0, r31
    140a:	f7 e1       	ldi	r31, 0x17	; 23
    140c:	ef 2e       	mov	r14, r31
    140e:	f0 2d       	mov	r31, r0
  frame->tx.status = status;
    1410:	68 94       	set
    1412:	ff 24       	eor	r15, r15
    1414:	f4 f8       	bld	r15, 4
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    1416:	16 c0       	rjmp	.+44     	; 0x1444 <nwkTxAckWaitTimerHandler+0x52>
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    1418:	fc 01       	movw	r30, r24
    141a:	20 81       	ld	r18, Z
    141c:	26 31       	cpi	r18, 0x16	; 22
    141e:	91 f4       	brne	.+36     	; 0x1444 <nwkTxAckWaitTimerHandler+0x52>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    1420:	ec 57       	subi	r30, 0x7C	; 124
    1422:	ff 4f       	sbci	r31, 0xFF	; 255
    1424:	20 81       	ld	r18, Z
    1426:	31 81       	ldd	r19, Z+1	; 0x01
    1428:	21 50       	subi	r18, 0x01	; 1
    142a:	31 09       	sbc	r19, r1
    142c:	31 83       	std	Z+1, r19	; 0x01
    142e:	20 83       	st	Z, r18
    1430:	23 2b       	or	r18, r19
    1432:	39 f4       	brne	.+14     	; 0x1442 <nwkTxAckWaitTimerHandler+0x50>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
    1434:	fc 01       	movw	r30, r24
    1436:	e0 82       	st	Z, r14
  frame->tx.status = status;
    1438:	ed 57       	subi	r30, 0x7D	; 125
    143a:	ff 4f       	sbci	r31, 0xFF	; 255
    143c:	f0 82       	st	Z, r15

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
    143e:	10 2f       	mov	r17, r16
    1440:	01 c0       	rjmp	.+2      	; 0x1444 <nwkTxAckWaitTimerHandler+0x52>
    1442:	10 2f       	mov	r17, r16
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    1444:	0e 94 20 05 	call	0xa40	; 0xa40 <nwkFrameNext>
    1448:	00 97       	sbiw	r24, 0x00	; 0
    144a:	31 f7       	brne	.-52     	; 0x1418 <nwkTxAckWaitTimerHandler+0x26>
      if (0 == --frame->tx.timeout)
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    }
  }

  if (restart)
    144c:	11 23       	and	r17, r17
    144e:	19 f0       	breq	.+6      	; 0x1456 <nwkTxAckWaitTimerHandler+0x64>
    SYS_TimerStart(timer);
    1450:	ce 01       	movw	r24, r28
    1452:	0e 94 a0 01 	call	0x340	; 0x340 <SYS_TimerStart>
}
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	1f 91       	pop	r17
    145c:	0f 91       	pop	r16
    145e:	ff 90       	pop	r15
    1460:	ef 90       	pop	r14
    1462:	08 95       	ret

00001464 <nwkTxInit>:
/*************************************************************************//**
  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
  nwkTxPhyActiveFrame = NULL;
    1464:	10 92 cf 0b 	sts	0x0BCF, r1
    1468:	10 92 ce 0b 	sts	0x0BCE, r1

  nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    146c:	82 e3       	ldi	r24, 0x32	; 50
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	a0 e0       	ldi	r26, 0x00	; 0
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	80 93 c7 0b 	sts	0x0BC7, r24
    1478:	90 93 c8 0b 	sts	0x0BC8, r25
    147c:	a0 93 c9 0b 	sts	0x0BC9, r26
    1480:	b0 93 ca 0b 	sts	0x0BCA, r27
  nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1484:	10 92 cb 0b 	sts	0x0BCB, r1
  nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    1488:	89 ef       	ldi	r24, 0xF9	; 249
    148a:	99 e0       	ldi	r25, 0x09	; 9
    148c:	90 93 cd 0b 	sts	0x0BCD, r25
    1490:	80 93 cc 0b 	sts	0x0BCC, r24

  nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    1494:	8a e0       	ldi	r24, 0x0A	; 10
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	a0 e0       	ldi	r26, 0x00	; 0
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	80 93 ba 0b 	sts	0x0BBA, r24
    14a0:	90 93 bb 0b 	sts	0x0BBB, r25
    14a4:	a0 93 bc 0b 	sts	0x0BBC, r26
    14a8:	b0 93 bd 0b 	sts	0x0BBD, r27
  nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    14ac:	10 92 be 0b 	sts	0x0BBE, r1
  nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    14b0:	88 ec       	ldi	r24, 0xC8	; 200
    14b2:	99 e0       	ldi	r25, 0x09	; 9
    14b4:	90 93 c0 0b 	sts	0x0BC0, r25
    14b8:	80 93 bf 0b 	sts	0x0BBF, r24
    14bc:	08 95       	ret

000014be <nwkTxFrame>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (frame->tx.control & NWK_TX_CONTROL_ROUTING)
    14c4:	fc 01       	movw	r30, r24
    14c6:	ea 57       	subi	r30, 0x7A	; 122
    14c8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ca:	20 81       	ld	r18, Z
    14cc:	21 ff       	sbrs	r18, 1
    14ce:	03 c0       	rjmp	.+6      	; 0x14d6 <nwkTxFrame+0x18>
  {
    frame->state = NWK_TX_STATE_DELAY;
    14d0:	82 e1       	ldi	r24, 0x12	; 18
    14d2:	88 83       	st	Y, r24
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <nwkTxFrame+0x1c>
  #ifdef NWK_ENABLE_SECURITY
    if (header->nwkFcf.security)
      frame->state = NWK_TX_STATE_ENCRYPT;
    else
  #endif
      frame->state = NWK_TX_STATE_DELAY;
    14d6:	82 e1       	ldi	r24, 0x12	; 18
    14d8:	88 83       	st	Y, r24
  }

  frame->tx.status = NWK_SUCCESS_STATUS;
    14da:	fe 01       	movw	r30, r28
    14dc:	ed 57       	subi	r30, 0x7D	; 125
    14de:	ff 4f       	sbci	r31, 0xFF	; 255
    14e0:	10 82       	st	Z, r1

  if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)
    14e2:	20 ff       	sbrs	r18, 0
    14e4:	05 c0       	rjmp	.+10     	; 0x14f0 <nwkTxFrame+0x32>
    header->macDstPanId = NWK_BROADCAST_PANID;
    14e6:	8f ef       	ldi	r24, 0xFF	; 255
    14e8:	9f ef       	ldi	r25, 0xFF	; 255
    14ea:	9e 83       	std	Y+6, r25	; 0x06
    14ec:	8d 83       	std	Y+5, r24	; 0x05
    14ee:	06 c0       	rjmp	.+12     	; 0x14fc <nwkTxFrame+0x3e>
  else
    header->macDstPanId = nwkIb.panId;
    14f0:	80 91 8b 0c 	lds	r24, 0x0C8B
    14f4:	90 91 8c 0c 	lds	r25, 0x0C8C
    14f8:	9e 83       	std	Y+6, r25	; 0x06
    14fa:	8d 83       	std	Y+5, r24	; 0x05
    14fc:	25 70       	andi	r18, 0x05	; 5

#ifdef NWK_ENABLE_ROUTING
  if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) && 
    14fe:	21 f4       	brne	.+8      	; 0x1508 <nwkTxFrame+0x4a>
      0 == (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID))
    nwkRoutePrepareTx(frame);
    1500:	ce 01       	movw	r24, r28
    1502:	0e 94 b0 06 	call	0xd60	; 0xd60 <nwkRoutePrepareTx>
    1506:	04 c0       	rjmp	.+8      	; 0x1510 <nwkTxFrame+0x52>
  else
#endif
    header->macDstAddr = header->nwkDstAddr;
    1508:	8f 85       	ldd	r24, Y+15	; 0x0f
    150a:	98 89       	ldd	r25, Y+16	; 0x10
    150c:	98 87       	std	Y+8, r25	; 0x08
    150e:	8f 83       	std	Y+7, r24	; 0x07

  header->macSrcAddr = nwkIb.addr;
    1510:	80 91 89 0c 	lds	r24, 0x0C89
    1514:	90 91 8a 0c 	lds	r25, 0x0C8A
    1518:	9a 87       	std	Y+10, r25	; 0x0a
    151a:	89 87       	std	Y+9, r24	; 0x09
  header->macSeq = ++nwkIb.macSeqNum;
    151c:	ee e8       	ldi	r30, 0x8E	; 142
    151e:	fc e0       	ldi	r31, 0x0C	; 12
    1520:	80 81       	ld	r24, Z
    1522:	8f 5f       	subi	r24, 0xFF	; 255
    1524:	80 83       	st	Z, r24
    1526:	8c 83       	std	Y+4, r24	; 0x04

  if (NWK_BROADCAST_ADDR == header->macDstAddr)
    1528:	8f 81       	ldd	r24, Y+7	; 0x07
    152a:	98 85       	ldd	r25, Y+8	; 0x08
    152c:	01 96       	adiw	r24, 0x01	; 1
    152e:	71 f4       	brne	.+28     	; 0x154c <nwkTxFrame+0x8e>
  {
    header->macFcf = 0x8841;
    1530:	81 e4       	ldi	r24, 0x41	; 65
    1532:	98 e8       	ldi	r25, 0x88	; 136
    1534:	9b 83       	std	Y+3, r25	; 0x03
    1536:	8a 83       	std	Y+2, r24	; 0x02
    frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    1538:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <rand>
    153c:	cc 57       	subi	r28, 0x7C	; 124
    153e:	df 4f       	sbci	r29, 0xFF	; 255
    1540:	87 70       	andi	r24, 0x07	; 7
    1542:	99 27       	eor	r25, r25
    1544:	01 96       	adiw	r24, 0x01	; 1
    1546:	99 83       	std	Y+1, r25	; 0x01
    1548:	88 83       	st	Y, r24
    154a:	08 c0       	rjmp	.+16     	; 0x155c <nwkTxFrame+0x9e>
  }
  else
  {
    header->macFcf = 0x8861;
    154c:	81 e6       	ldi	r24, 0x61	; 97
    154e:	98 e8       	ldi	r25, 0x88	; 136
    1550:	9b 83       	std	Y+3, r25	; 0x03
    1552:	8a 83       	std	Y+2, r24	; 0x02
    frame->tx.timeout = 0;
    1554:	cc 57       	subi	r28, 0x7C	; 124
    1556:	df 4f       	sbci	r29, 0xFF	; 255
    1558:	19 82       	std	Y+1, r1	; 0x01
    155a:	18 82       	st	Y, r1
  }
}
    155c:	df 91       	pop	r29
    155e:	cf 91       	pop	r28
    1560:	08 95       	ret

00001562 <nwkTxBroadcastFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    1562:	0f 93       	push	r16
    1564:	1f 93       	push	r17
    1566:	cf 93       	push	r28
    1568:	df 93       	push	r29
    156a:	8c 01       	movw	r16, r24
  NwkFrame_t *newFrame;

  if (NULL == (newFrame = nwkFrameAlloc()))
    156c:	0e 94 df 04 	call	0x9be	; 0x9be <nwkFrameAlloc>
    1570:	ec 01       	movw	r28, r24
    1572:	00 97       	sbiw	r24, 0x00	; 0
    1574:	c9 f1       	breq	.+114    	; 0x15e8 <nwkTxBroadcastFrame+0x86>
    return;

  newFrame->state = NWK_TX_STATE_DELAY;
    1576:	82 e1       	ldi	r24, 0x12	; 18
    1578:	88 83       	st	Y, r24
  newFrame->size = frame->size;
    157a:	f8 01       	movw	r30, r16
    157c:	81 81       	ldd	r24, Z+1	; 0x01
    157e:	89 83       	std	Y+1, r24	; 0x01
  newFrame->tx.status = NWK_SUCCESS_STATUS;
    1580:	fe 01       	movw	r30, r28
    1582:	ed 57       	subi	r30, 0x7D	; 125
    1584:	ff 4f       	sbci	r31, 0xFF	; 255
    1586:	10 82       	st	Z, r1
  newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    1588:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <rand>
    158c:	fe 01       	movw	r30, r28
    158e:	ec 57       	subi	r30, 0x7C	; 124
    1590:	ff 4f       	sbci	r31, 0xFF	; 255
    1592:	87 70       	andi	r24, 0x07	; 7
    1594:	99 27       	eor	r25, r25
    1596:	01 96       	adiw	r24, 0x01	; 1
    1598:	91 83       	std	Z+1, r25	; 0x01
    159a:	80 83       	st	Z, r24
  newFrame->tx.confirm = NULL;
    159c:	33 96       	adiw	r30, 0x03	; 3
    159e:	11 82       	std	Z+1, r1	; 0x01
    15a0:	10 82       	st	Z, r1
  memcpy(newFrame->data, frame->data, frame->size);
    15a2:	f8 01       	movw	r30, r16
    15a4:	41 81       	ldd	r20, Z+1	; 0x01
    15a6:	50 e0       	ldi	r21, 0x00	; 0
    15a8:	b8 01       	movw	r22, r16
    15aa:	6e 5f       	subi	r22, 0xFE	; 254
    15ac:	7f 4f       	sbci	r23, 0xFF	; 255
    15ae:	ce 01       	movw	r24, r28
    15b0:	02 96       	adiw	r24, 0x02	; 2
    15b2:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <memcpy>

  newFrame->header.macFcf = 0x8841;
    15b6:	81 e4       	ldi	r24, 0x41	; 65
    15b8:	98 e8       	ldi	r25, 0x88	; 136
    15ba:	9b 83       	std	Y+3, r25	; 0x03
    15bc:	8a 83       	std	Y+2, r24	; 0x02
  newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
    15be:	8f ef       	ldi	r24, 0xFF	; 255
    15c0:	9f ef       	ldi	r25, 0xFF	; 255
    15c2:	98 87       	std	Y+8, r25	; 0x08
    15c4:	8f 83       	std	Y+7, r24	; 0x07
  newFrame->header.macDstPanId = frame->header.macDstPanId;
    15c6:	f8 01       	movw	r30, r16
    15c8:	85 81       	ldd	r24, Z+5	; 0x05
    15ca:	96 81       	ldd	r25, Z+6	; 0x06
    15cc:	9e 83       	std	Y+6, r25	; 0x06
    15ce:	8d 83       	std	Y+5, r24	; 0x05
  newFrame->header.macSrcAddr = nwkIb.addr;
    15d0:	80 91 89 0c 	lds	r24, 0x0C89
    15d4:	90 91 8a 0c 	lds	r25, 0x0C8A
    15d8:	9a 87       	std	Y+10, r25	; 0x0a
    15da:	89 87       	std	Y+9, r24	; 0x09
  newFrame->header.macSeq = ++nwkIb.macSeqNum;
    15dc:	ee e8       	ldi	r30, 0x8E	; 142
    15de:	fc e0       	ldi	r31, 0x0C	; 12
    15e0:	80 81       	ld	r24, Z
    15e2:	8f 5f       	subi	r24, 0xFF	; 255
    15e4:	80 83       	st	Z, r24
    15e6:	8c 83       	std	Y+4, r24	; 0x04
}
    15e8:	df 91       	pop	r29
    15ea:	cf 91       	pop	r28
    15ec:	1f 91       	pop	r17
    15ee:	0f 91       	pop	r16
    15f0:	08 95       	ret

000015f2 <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    15f2:	cf 93       	push	r28
    15f4:	df 93       	push	r29
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    15f6:	fc 01       	movw	r30, r24
    15f8:	c7 81       	ldd	r28, Z+7	; 0x07
    15fa:	d0 85       	ldd	r29, Z+8	; 0x08
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    15fc:	81 85       	ldd	r24, Z+9	; 0x09
    15fe:	83 30       	cpi	r24, 0x03	; 3
    1600:	c9 f4       	brne	.+50     	; 0x1634 <nwkTxAckReceived+0x42>
    1602:	10 c0       	rjmp	.+32     	; 0x1624 <nwkTxAckReceived+0x32>
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->header.nwkSeq == command->seq)
    1604:	fc 01       	movw	r30, r24
    1606:	20 81       	ld	r18, Z
    1608:	26 31       	cpi	r18, 0x16	; 22
    160a:	71 f4       	brne	.+28     	; 0x1628 <nwkTxAckReceived+0x36>
    160c:	34 85       	ldd	r19, Z+12	; 0x0c
    160e:	29 81       	ldd	r18, Y+1	; 0x01
    1610:	32 13       	cpse	r19, r18
    1612:	0a c0       	rjmp	.+20     	; 0x1628 <nwkTxAckReceived+0x36>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
    1614:	27 e1       	ldi	r18, 0x17	; 23
    1616:	20 83       	st	Z, r18
      frame->tx.control = command->control;
    1618:	2a 81       	ldd	r18, Y+2	; 0x02
    161a:	ea 57       	subi	r30, 0x7A	; 122
    161c:	ff 4f       	sbci	r31, 0xFF	; 255
    161e:	20 83       	st	Z, r18
      return true;
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	09 c0       	rjmp	.+18     	; 0x1636 <nwkTxAckReceived+0x44>
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	90 e0       	ldi	r25, 0x00	; 0
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
    1628:	0e 94 20 05 	call	0xa40	; 0xa40 <nwkFrameNext>
    162c:	00 97       	sbiw	r24, 0x00	; 0
    162e:	51 f7       	brne	.-44     	; 0x1604 <nwkTxAckReceived+0x12>
      frame->tx.control = command->control;
      return true;
    }
  }

  return false;
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	01 c0       	rjmp	.+2      	; 0x1636 <nwkTxAckReceived+0x44>
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;
    1634:	80 e0       	ldi	r24, 0x00	; 0
      return true;
    }
  }

  return false;
}
    1636:	df 91       	pop	r29
    1638:	cf 91       	pop	r28
    163a:	08 95       	ret

0000163c <nwkTxConfirm>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
    163c:	27 e1       	ldi	r18, 0x17	; 23
    163e:	fc 01       	movw	r30, r24
    1640:	20 83       	st	Z, r18
  frame->tx.status = status;
    1642:	ed 57       	subi	r30, 0x7D	; 125
    1644:	ff 4f       	sbci	r31, 0xFF	; 255
    1646:	60 83       	st	Z, r22
    1648:	08 95       	ret

0000164a <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    164a:	e0 91 ce 0b 	lds	r30, 0x0BCE
    164e:	f0 91 cf 0b 	lds	r31, 0x0BCF

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    1652:	81 30       	cpi	r24, 0x01	; 1
    1654:	51 f0       	breq	.+20     	; 0x166a <PHY_DataConf+0x20>
    1656:	18 f0       	brcs	.+6      	; 0x165e <PHY_DataConf+0x14>
    1658:	82 30       	cpi	r24, 0x02	; 2
    165a:	19 f0       	breq	.+6      	; 0x1662 <PHY_DataConf+0x18>
    165c:	04 c0       	rjmp	.+8      	; 0x1666 <PHY_DataConf+0x1c>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	05 c0       	rjmp	.+10     	; 0x166c <PHY_DataConf+0x22>

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    1662:	81 e2       	ldi	r24, 0x21	; 33
    1664:	03 c0       	rjmp	.+6      	; 0x166c <PHY_DataConf+0x22>

    default:
      return NWK_ERROR_STATUS;
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	01 c0       	rjmp	.+2      	; 0x166c <PHY_DataConf+0x22>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    166a:	80 e2       	ldi	r24, 0x20	; 32

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    166c:	df 01       	movw	r26, r30
    166e:	ad 57       	subi	r26, 0x7D	; 125
    1670:	bf 4f       	sbci	r27, 0xFF	; 255
    1672:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    1674:	85 e1       	ldi	r24, 0x15	; 21
    1676:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    1678:	10 92 cf 0b 	sts	0x0BCF, r1
    167c:	10 92 ce 0b 	sts	0x0BCE, r1
  nwkIb.lock--;
    1680:	ef ea       	ldi	r30, 0xAF	; 175
    1682:	fc e0       	ldi	r31, 0x0C	; 12
    1684:	80 81       	ld	r24, Z
    1686:	91 81       	ldd	r25, Z+1	; 0x01
    1688:	01 97       	sbiw	r24, 0x01	; 1
    168a:	91 83       	std	Z+1, r25	; 0x01
    168c:	80 83       	st	Z, r24
    168e:	08 95       	ret

00001690 <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    1690:	7f 92       	push	r7
    1692:	8f 92       	push	r8
    1694:	9f 92       	push	r9
    1696:	af 92       	push	r10
    1698:	bf 92       	push	r11
    169a:	cf 92       	push	r12
    169c:	df 92       	push	r13
    169e:	ef 92       	push	r14
    16a0:	ff 92       	push	r15
    16a2:	0f 93       	push	r16
    16a4:	1f 93       	push	r17
    16a6:	cf 93       	push	r28
    16a8:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    16aa:	c0 e0       	ldi	r28, 0x00	; 0
    16ac:	d0 e0       	ldi	r29, 0x00	; 0
      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    16ae:	0f 2e       	mov	r0, r31
    16b0:	f4 e1       	ldi	r31, 0x14	; 20
    16b2:	8f 2e       	mov	r8, r31
    16b4:	f0 2d       	mov	r31, r0
          PHY_DataReq(frame->data, frame->size);
          nwkIb.lock++;
    16b6:	0f 2e       	mov	r0, r31
    16b8:	ff ea       	ldi	r31, 0xAF	; 175
    16ba:	ef 2e       	mov	r14, r31
    16bc:	fc e0       	ldi	r31, 0x0C	; 12
    16be:	ff 2e       	mov	r15, r31
    16c0:	f0 2d       	mov	r31, r0
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    16c2:	0f 2e       	mov	r0, r31
    16c4:	f7 e1       	ldi	r31, 0x17	; 23
    16c6:	bf 2e       	mov	r11, r31
    16c8:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    16ca:	09 e8       	ldi	r16, 0x89	; 137
    16cc:	1c e0       	ldi	r17, 0x0C	; 12
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    16ce:	0f 2e       	mov	r0, r31
    16d0:	f6 e1       	ldi	r31, 0x16	; 22
    16d2:	7f 2e       	mov	r7, r31
    16d4:	f0 2d       	mov	r31, r0
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    16d6:	0f 2e       	mov	r0, r31
    16d8:	f5 e1       	ldi	r31, 0x15	; 21
    16da:	cf 2e       	mov	r12, r31
    16dc:	d1 2c       	mov	r13, r1
    16de:	f0 2d       	mov	r31, r0
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    16e0:	0f 2e       	mov	r0, r31
    16e2:	f3 e1       	ldi	r31, 0x13	; 19
    16e4:	af 2e       	mov	r10, r31
    16e6:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    16e8:	0f 2e       	mov	r0, r31
    16ea:	f1 e1       	ldi	r31, 0x11	; 17
    16ec:	9f 2e       	mov	r9, r31
    16ee:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    16f0:	65 c0       	rjmp	.+202    	; 0x17bc <nwkTxTaskHandler+0x12c>
  {
    switch (frame->state)
    16f2:	88 81       	ld	r24, Y
    16f4:	83 31       	cpi	r24, 0x13	; 19
    16f6:	c9 f0       	breq	.+50     	; 0x172a <nwkTxTaskHandler+0x9a>
    16f8:	18 f4       	brcc	.+6      	; 0x1700 <nwkTxTaskHandler+0x70>
    16fa:	82 31       	cpi	r24, 0x12	; 18
    16fc:	39 f0       	breq	.+14     	; 0x170c <nwkTxTaskHandler+0x7c>
    16fe:	5e c0       	rjmp	.+188    	; 0x17bc <nwkTxTaskHandler+0x12c>
    1700:	85 31       	cpi	r24, 0x15	; 21
    1702:	59 f1       	breq	.+86     	; 0x175a <nwkTxTaskHandler+0xca>
    1704:	87 31       	cpi	r24, 0x17	; 23
    1706:	09 f4       	brne	.+2      	; 0x170a <nwkTxTaskHandler+0x7a>
    1708:	48 c0       	rjmp	.+144    	; 0x179a <nwkTxTaskHandler+0x10a>
    170a:	58 c0       	rjmp	.+176    	; 0x17bc <nwkTxTaskHandler+0x12c>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    170c:	fe 01       	movw	r30, r28
    170e:	ec 57       	subi	r30, 0x7C	; 124
    1710:	ff 4f       	sbci	r31, 0xFF	; 255
    1712:	80 81       	ld	r24, Z
    1714:	91 81       	ldd	r25, Z+1	; 0x01
    1716:	89 2b       	or	r24, r25
    1718:	31 f0       	breq	.+12     	; 0x1726 <nwkTxTaskHandler+0x96>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    171a:	98 82       	st	Y, r9
          SYS_TimerStart(&nwkTxDelayTimer);
    171c:	84 eb       	ldi	r24, 0xB4	; 180
    171e:	9b e0       	ldi	r25, 0x0B	; 11
    1720:	0e 94 a0 01 	call	0x340	; 0x340 <SYS_TimerStart>
    1724:	4b c0       	rjmp	.+150    	; 0x17bc <nwkTxTaskHandler+0x12c>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    1726:	a8 82       	st	Y, r10
    1728:	49 c0       	rjmp	.+146    	; 0x17bc <nwkTxTaskHandler+0x12c>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    172a:	80 91 ce 0b 	lds	r24, 0x0BCE
    172e:	90 91 cf 0b 	lds	r25, 0x0BCF
    1732:	89 2b       	or	r24, r25
    1734:	09 f0       	breq	.+2      	; 0x1738 <nwkTxTaskHandler+0xa8>
    1736:	42 c0       	rjmp	.+132    	; 0x17bc <nwkTxTaskHandler+0x12c>
        {
          nwkTxPhyActiveFrame = frame;
    1738:	d0 93 cf 0b 	sts	0x0BCF, r29
    173c:	c0 93 ce 0b 	sts	0x0BCE, r28
          frame->state = NWK_TX_STATE_WAIT_CONF;
    1740:	88 82       	st	Y, r8
          PHY_DataReq(frame->data, frame->size);
    1742:	69 81       	ldd	r22, Y+1	; 0x01
    1744:	ce 01       	movw	r24, r28
    1746:	02 96       	adiw	r24, 0x02	; 2
    1748:	0e 94 c4 02 	call	0x588	; 0x588 <PHY_DataReq>
          nwkIb.lock++;
    174c:	f7 01       	movw	r30, r14
    174e:	80 81       	ld	r24, Z
    1750:	91 81       	ldd	r25, Z+1	; 0x01
    1752:	01 96       	adiw	r24, 0x01	; 1
    1754:	91 83       	std	Z+1, r25	; 0x01
    1756:	80 83       	st	Z, r24
    1758:	31 c0       	rjmp	.+98     	; 0x17bc <nwkTxTaskHandler+0x12c>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    175a:	fe 01       	movw	r30, r28
    175c:	ed 57       	subi	r30, 0x7D	; 125
    175e:	ff 4f       	sbci	r31, 0xFF	; 255
    1760:	80 81       	ld	r24, Z
    1762:	81 11       	cpse	r24, r1
    1764:	18 c0       	rjmp	.+48     	; 0x1796 <nwkTxTaskHandler+0x106>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    1766:	2d 85       	ldd	r18, Y+13	; 0x0d
    1768:	3e 85       	ldd	r19, Y+14	; 0x0e
    176a:	f8 01       	movw	r30, r16
    176c:	80 81       	ld	r24, Z
    176e:	91 81       	ldd	r25, Z+1	; 0x01
    1770:	28 17       	cp	r18, r24
    1772:	39 07       	cpc	r19, r25
    1774:	71 f4       	brne	.+28     	; 0x1792 <nwkTxTaskHandler+0x102>
    1776:	8b 85       	ldd	r24, Y+11	; 0x0b
    1778:	80 ff       	sbrs	r24, 0
    177a:	0b c0       	rjmp	.+22     	; 0x1792 <nwkTxTaskHandler+0x102>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    177c:	78 82       	st	Y, r7
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    177e:	fe 01       	movw	r30, r28
    1780:	ec 57       	subi	r30, 0x7C	; 124
    1782:	ff 4f       	sbci	r31, 0xFF	; 255
    1784:	d1 82       	std	Z+1, r13	; 0x01
    1786:	c0 82       	st	Z, r12
            SYS_TimerStart(&nwkTxAckWaitTimer);
    1788:	81 ec       	ldi	r24, 0xC1	; 193
    178a:	9b e0       	ldi	r25, 0x0B	; 11
    178c:	0e 94 a0 01 	call	0x340	; 0x340 <SYS_TimerStart>
    1790:	15 c0       	rjmp	.+42     	; 0x17bc <nwkTxTaskHandler+0x12c>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    1792:	b8 82       	st	Y, r11
    1794:	13 c0       	rjmp	.+38     	; 0x17bc <nwkTxTaskHandler+0x12c>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    1796:	b8 82       	st	Y, r11
    1798:	11 c0       	rjmp	.+34     	; 0x17bc <nwkTxTaskHandler+0x12c>
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    179a:	ce 01       	movw	r24, r28
    179c:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    17a0:	fe 01       	movw	r30, r28
    17a2:	e9 57       	subi	r30, 0x79	; 121
    17a4:	ff 4f       	sbci	r31, 0xFF	; 255
    17a6:	01 90       	ld	r0, Z+
    17a8:	f0 81       	ld	r31, Z
    17aa:	e0 2d       	mov	r30, r0
    17ac:	30 97       	sbiw	r30, 0x00	; 0
    17ae:	21 f4       	brne	.+8      	; 0x17b8 <nwkTxTaskHandler+0x128>
          nwkFrameFree(frame);
    17b0:	ce 01       	movw	r24, r28
    17b2:	0e 94 16 05 	call	0xa2c	; 0xa2c <nwkFrameFree>
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <nwkTxTaskHandler+0x12c>
        else
          frame->tx.confirm(frame);
    17b8:	ce 01       	movw	r24, r28
    17ba:	19 95       	eicall
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    17bc:	ce 01       	movw	r24, r28
    17be:	0e 94 20 05 	call	0xa40	; 0xa40 <nwkFrameNext>
    17c2:	ec 01       	movw	r28, r24
    17c4:	00 97       	sbiw	r24, 0x00	; 0
    17c6:	09 f0       	breq	.+2      	; 0x17ca <nwkTxTaskHandler+0x13a>
    17c8:	94 cf       	rjmp	.-216    	; 0x16f2 <nwkTxTaskHandler+0x62>

      default:
        break;
    };
  }
}
    17ca:	df 91       	pop	r29
    17cc:	cf 91       	pop	r28
    17ce:	1f 91       	pop	r17
    17d0:	0f 91       	pop	r16
    17d2:	ff 90       	pop	r15
    17d4:	ef 90       	pop	r14
    17d6:	df 90       	pop	r13
    17d8:	cf 90       	pop	r12
    17da:	bf 90       	pop	r11
    17dc:	af 90       	pop	r10
    17de:	9f 90       	pop	r9
    17e0:	8f 90       	pop	r8
    17e2:	7f 90       	pop	r7
    17e4:	08 95       	ret

000017e6 <HAL_Sleep>:
}

/*************************************************************************//**
*****************************************************************************/
void HAL_Sleep(uint32_t interval)
{
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
  uint32_t ticks;
  uint16_t integer;
  uint8_t fractional;

  ticks = (interval * PRESCALED_CLOCK) / 1000ul;
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	88 0f       	add	r24, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	aa 1f       	adc	r26, r26
    17f4:	bb 1f       	adc	r27, r27
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	aa 1f       	adc	r26, r26
    17fc:	bb 1f       	adc	r27, r27
    17fe:	88 0f       	add	r24, r24
    1800:	99 1f       	adc	r25, r25
    1802:	aa 1f       	adc	r26, r26
    1804:	bb 1f       	adc	r27, r27
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	aa 1f       	adc	r26, r26
    180c:	bb 1f       	adc	r27, r27
    180e:	bc 01       	movw	r22, r24
    1810:	cd 01       	movw	r24, r26
    1812:	66 0f       	add	r22, r22
    1814:	77 1f       	adc	r23, r23
    1816:	88 1f       	adc	r24, r24
    1818:	99 1f       	adc	r25, r25
    181a:	28 ee       	ldi	r18, 0xE8	; 232
    181c:	33 e0       	ldi	r19, 0x03	; 3
    181e:	40 e0       	ldi	r20, 0x00	; 0
    1820:	50 e0       	ldi	r21, 0x00	; 0
    1822:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <__udivmodsi4>
  if (0 == ticks)
    1826:	21 15       	cp	r18, r1
    1828:	31 05       	cpc	r19, r1
    182a:	41 05       	cpc	r20, r1
    182c:	51 05       	cpc	r21, r1
    182e:	09 f4       	brne	.+2      	; 0x1832 <HAL_Sleep+0x4c>
    1830:	57 c0       	rjmp	.+174    	; 0x18e0 <HAL_Sleep+0xfa>
    return;

  integer = ticks >> 8;
    1832:	bb 27       	eor	r27, r27
    1834:	a5 2f       	mov	r26, r21
    1836:	94 2f       	mov	r25, r20
    1838:	83 2f       	mov	r24, r19
  fractional = ticks & 0xff;

  TIMSK2 = 0;
    183a:	10 92 70 00 	sts	0x0070, r1
  ASSR |= (1 << AS2);
    183e:	e6 eb       	ldi	r30, 0xB6	; 182
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	30 81       	ld	r19, Z
    1844:	30 62       	ori	r19, 0x20	; 32
    1846:	30 83       	st	Z, r19
  TCCR2A = 0;
    1848:	10 92 b0 00 	sts	0x00B0, r1
  TCCR2B = 0;
    184c:	10 92 b1 00 	sts	0x00B1, r1
  TCNT2 = 0;
    1850:	10 92 b2 00 	sts	0x00B2, r1

/*************************************************************************//**
*****************************************************************************/
static inline void halSleepSynchronize(void)
{
  while (ASSR & ((1 << TCN2UB) | (1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB)));
    1854:	30 81       	ld	r19, Z
    1856:	3f 71       	andi	r19, 0x1F	; 31
    1858:	e9 f7       	brne	.-6      	; 0x1854 <HAL_Sleep+0x6e>
  TCCR2A = 0;
  TCCR2B = 0;
  TCNT2 = 0;
  halSleepSynchronize();

  TIFR2 = (1 << OCF2B) | (1 << OCF2A) | (1 << TOV2);
    185a:	37 e0       	ldi	r19, 0x07	; 7
    185c:	37 bb       	out	0x17, r19	; 23
  TCCR2B = ((1 << CS20) | (1 << CS21) | (1 << CS22));   // clk/1024
    185e:	30 93 b1 00 	sts	0x00B1, r19
    halSleepTimerEvent = false;

    if (integer > 0)
      OCR2A = 0xff;
    else if (fractional > 0)
      OCR2A = fractional;
    1862:	c3 eb       	ldi	r28, 0xB3	; 179
    1864:	d0 e0       	ldi	r29, 0x00	; 0
  while (1)
  {
    halSleepTimerEvent = false;

    if (integer > 0)
      OCR2A = 0xff;
    1866:	6f ef       	ldi	r22, 0xFF	; 255
      halSleepSynchronize();
      ASSR &= ~(1 << AS2);
      return;
    }

    TIMSK2 |= (1 << OCIE2A);
    1868:	a0 e7       	ldi	r26, 0x70	; 112
    186a:	b0 e0       	ldi	r27, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static inline void halSleepSynchronize(void)
{
  while (ASSR & ((1 << TCN2UB) | (1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB)));
    186c:	e6 eb       	ldi	r30, 0xB6	; 182
    186e:	f0 e0       	ldi	r31, 0x00	; 0

    TIMSK2 |= (1 << OCIE2A);

    halSleepSynchronize();

    SMCR = (1 << SM1) | (1 << SM0) | (1 << SE); // power-save
    1870:	57 e0       	ldi	r21, 0x07	; 7
    1872:	01 c0       	rjmp	.+2      	; 0x1876 <HAL_Sleep+0x90>
    if (event)
    {
      if (integer > 0)
        integer--;
      else
        fractional = 0;
    1874:	20 e0       	ldi	r18, 0x00	; 0
  TIFR2 = (1 << OCF2B) | (1 << OCF2A) | (1 << TOV2);
  TCCR2B = ((1 << CS20) | (1 << CS21) | (1 << CS22));   // clk/1024

  while (1)
  {
    halSleepTimerEvent = false;
    1876:	10 92 d0 0b 	sts	0x0BD0, r1

    if (integer > 0)
    187a:	00 97       	sbiw	r24, 0x00	; 0
    187c:	11 f0       	breq	.+4      	; 0x1882 <HAL_Sleep+0x9c>
      OCR2A = 0xff;
    187e:	68 83       	st	Y, r22
    1880:	1b c0       	rjmp	.+54     	; 0x18b8 <HAL_Sleep+0xd2>
    else if (fractional > 0)
    1882:	22 23       	and	r18, r18
    1884:	11 f0       	breq	.+4      	; 0x188a <HAL_Sleep+0xa4>
      OCR2A = fractional;
    1886:	28 83       	st	Y, r18
    1888:	17 c0       	rjmp	.+46     	; 0x18b8 <HAL_Sleep+0xd2>

/*************************************************************************//**
*****************************************************************************/
static inline void halSleepSynchronize(void)
{
  while (ASSR & ((1 << TCN2UB) | (1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB)));
    188a:	e6 eb       	ldi	r30, 0xB6	; 182
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	8f 71       	andi	r24, 0x1F	; 31
    1892:	e9 f7       	brne	.-6      	; 0x188e <HAL_Sleep+0xa8>
    else if (fractional > 0)
      OCR2A = fractional;
    else
    {
      halSleepSynchronize();
      TIMSK2 = 0;
    1894:	10 92 70 00 	sts	0x0070, r1
      TCCR2B = 0;
    1898:	10 92 b1 00 	sts	0x00B1, r1
      GTCCR |= (1 << PSRASY);
    189c:	83 b5       	in	r24, 0x23	; 35
    189e:	82 60       	ori	r24, 0x02	; 2
    18a0:	83 bd       	out	0x23, r24	; 35

/*************************************************************************//**
*****************************************************************************/
static inline void halSleepSynchronize(void)
{
  while (ASSR & ((1 << TCN2UB) | (1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB)));
    18a2:	e6 eb       	ldi	r30, 0xB6	; 182
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	8f 71       	andi	r24, 0x1F	; 31
    18aa:	e9 f7       	brne	.-6      	; 0x18a6 <HAL_Sleep+0xc0>
      halSleepSynchronize();
      TIMSK2 = 0;
      TCCR2B = 0;
      GTCCR |= (1 << PSRASY);
      halSleepSynchronize();
      ASSR &= ~(1 << AS2);
    18ac:	e6 eb       	ldi	r30, 0xB6	; 182
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	8f 7d       	andi	r24, 0xDF	; 223
    18b4:	80 83       	st	Z, r24
      return;
    18b6:	14 c0       	rjmp	.+40     	; 0x18e0 <HAL_Sleep+0xfa>
    }

    TIMSK2 |= (1 << OCIE2A);
    18b8:	3c 91       	ld	r19, X
    18ba:	32 60       	ori	r19, 0x02	; 2
    18bc:	3c 93       	st	X, r19

/*************************************************************************//**
*****************************************************************************/
static inline void halSleepSynchronize(void)
{
  while (ASSR & ((1 << TCN2UB) | (1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB)));
    18be:	30 81       	ld	r19, Z
    18c0:	3f 71       	andi	r19, 0x1F	; 31
    18c2:	e9 f7       	brne	.-6      	; 0x18be <HAL_Sleep+0xd8>

    TIMSK2 |= (1 << OCIE2A);

    halSleepSynchronize();

    SMCR = (1 << SM1) | (1 << SM0) | (1 << SE); // power-save
    18c4:	53 bf       	out	0x33, r21	; 51
    asm("sleep");
    18c6:	88 95       	sleep
    SMCR = 0;
    18c8:	13 be       	out	0x33, r1	; 51

    bool event;

    ATOMIC_SECTION_ENTER
    18ca:	4f b7       	in	r20, 0x3f	; 63
    18cc:	f8 94       	cli
      event = halSleepTimerEvent;
    18ce:	30 91 d0 0b 	lds	r19, 0x0BD0
    ATOMIC_SECTION_LEAVE
    18d2:	4f bf       	out	0x3f, r20	; 63

    if (event)
    18d4:	33 23       	and	r19, r19
    18d6:	79 f2       	breq	.-98     	; 0x1876 <HAL_Sleep+0x90>
    {
      if (integer > 0)
    18d8:	00 97       	sbiw	r24, 0x00	; 0
    18da:	61 f2       	breq	.-104    	; 0x1874 <HAL_Sleep+0x8e>
        integer--;
    18dc:	01 97       	sbiw	r24, 0x01	; 1
    18de:	cb cf       	rjmp	.-106    	; 0x1876 <HAL_Sleep+0x90>
    else
    {
      // wakeup from some other source
    }
  }
}
    18e0:	df 91       	pop	r29
    18e2:	cf 91       	pop	r28
    18e4:	08 95       	ret

000018e6 <__vector_13>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
    18e6:	1f 92       	push	r1
    18e8:	0f 92       	push	r0
    18ea:	0f b6       	in	r0, 0x3f	; 63
    18ec:	0f 92       	push	r0
    18ee:	11 24       	eor	r1, r1
    18f0:	8f 93       	push	r24
  halSleepTimerEvent = true;
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	80 93 d0 0b 	sts	0x0BD0, r24
}
    18f8:	8f 91       	pop	r24
    18fa:	0f 90       	pop	r0
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	0f 90       	pop	r0
    1900:	1f 90       	pop	r1
    1902:	18 95       	reti

00001904 <HAL_UartInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartInit(uint32_t baudrate)
{
  uint32_t brr = ((uint32_t)F_CPU * 2) / (16 * baudrate) - 1;
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	88 0f       	add	r24, r24
    190a:	99 1f       	adc	r25, r25
    190c:	aa 1f       	adc	r26, r26
    190e:	bb 1f       	adc	r27, r27
    1910:	88 0f       	add	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	aa 1f       	adc	r26, r26
    1916:	bb 1f       	adc	r27, r27
    1918:	9c 01       	movw	r18, r24
    191a:	ad 01       	movw	r20, r26
    191c:	22 0f       	add	r18, r18
    191e:	33 1f       	adc	r19, r19
    1920:	44 1f       	adc	r20, r20
    1922:	55 1f       	adc	r21, r21
    1924:	22 0f       	add	r18, r18
    1926:	33 1f       	adc	r19, r19
    1928:	44 1f       	adc	r20, r20
    192a:	55 1f       	adc	r21, r21
    192c:	60 e0       	ldi	r22, 0x00	; 0
    192e:	74 e2       	ldi	r23, 0x24	; 36
    1930:	84 ef       	ldi	r24, 0xF4	; 244
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <__udivmodsi4>
    1938:	da 01       	movw	r26, r20
    193a:	c9 01       	movw	r24, r18
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	a1 09       	sbc	r26, r1
    1940:	b1 09       	sbc	r27, r1

  UBRRxH = (brr >> 8) & 0xff;
    1942:	49 2f       	mov	r20, r25
    1944:	5a 2f       	mov	r21, r26
    1946:	6b 2f       	mov	r22, r27
    1948:	77 27       	eor	r23, r23
    194a:	40 93 cd 00 	sts	0x00CD, r20
  UBRRxL = (brr & 0xff);
    194e:	80 93 cc 00 	sts	0x00CC, r24
  UCSRxA = (1 << U2X1);
    1952:	82 e0       	ldi	r24, 0x02	; 2
    1954:	80 93 c8 00 	sts	0x00C8, r24
  UCSRxB = (1 << TXEN1) | (1 << RXEN1) | (1 << RXCIE1);
    1958:	88 e9       	ldi	r24, 0x98	; 152
    195a:	80 93 c9 00 	sts	0x00C9, r24
  UCSRxC = (3 << UCSZ10);
    195e:	86 e0       	ldi	r24, 0x06	; 6
    1960:	80 93 ca 00 	sts	0x00CA, r24

  txFifo.data = txData;
    1964:	8e e2       	ldi	r24, 0x2E	; 46
    1966:	9c e0       	ldi	r25, 0x0C	; 12
    1968:	90 93 88 0c 	sts	0x0C88, r25
    196c:	80 93 87 0c 	sts	0x0C87, r24
  txFifo.size = HAL_UART_TX_FIFO_SIZE;
    1970:	80 e5       	ldi	r24, 0x50	; 80
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	90 93 84 0c 	sts	0x0C84, r25
    1978:	80 93 83 0c 	sts	0x0C83, r24
  txFifo.bytes = 0;
    197c:	10 92 86 0c 	sts	0x0C86, r1
    1980:	10 92 85 0c 	sts	0x0C85, r1
  txFifo.head = 0;
    1984:	10 92 80 0c 	sts	0x0C80, r1
    1988:	10 92 7f 0c 	sts	0x0C7F, r1
  txFifo.tail = 0;
    198c:	10 92 82 0c 	sts	0x0C82, r1
    1990:	10 92 81 0c 	sts	0x0C81, r1

  rxFifo.data = rxData;
    1994:	23 ed       	ldi	r18, 0xD3	; 211
    1996:	3b e0       	ldi	r19, 0x0B	; 11
    1998:	30 93 2d 0c 	sts	0x0C2D, r19
    199c:	20 93 2c 0c 	sts	0x0C2C, r18
  rxFifo.size = HAL_UART_RX_FIFO_SIZE;
    19a0:	90 93 29 0c 	sts	0x0C29, r25
    19a4:	80 93 28 0c 	sts	0x0C28, r24
  rxFifo.bytes = 0;
    19a8:	10 92 2b 0c 	sts	0x0C2B, r1
    19ac:	10 92 2a 0c 	sts	0x0C2A, r1
  rxFifo.head = 0;
    19b0:	10 92 25 0c 	sts	0x0C25, r1
    19b4:	10 92 24 0c 	sts	0x0C24, r1
  rxFifo.tail = 0;
    19b8:	10 92 27 0c 	sts	0x0C27, r1
    19bc:	10 92 26 0c 	sts	0x0C26, r1

  udrEmpty = true;
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	80 93 d2 0b 	sts	0x0BD2, r24
  newData = false;
    19c6:	10 92 d1 0b 	sts	0x0BD1, r1
    19ca:	08 95       	ret

000019cc <HAL_UartWriteByte>:
}

/*************************************************************************//**
*****************************************************************************/
void HAL_UartWriteByte(uint8_t byte)
{
    19cc:	cf 93       	push	r28
    19ce:	df 93       	push	r29
  if (txFifo.bytes == txFifo.size)
    19d0:	20 91 85 0c 	lds	r18, 0x0C85
    19d4:	30 91 86 0c 	lds	r19, 0x0C86
    19d8:	40 91 83 0c 	lds	r20, 0x0C83
    19dc:	50 91 84 0c 	lds	r21, 0x0C84
    19e0:	24 17       	cp	r18, r20
    19e2:	35 07       	cpc	r19, r21
    19e4:	f1 f0       	breq	.+60     	; 0x1a22 <HAL_UartWriteByte+0x56>
    return;

  txFifo.data[txFifo.tail++] = byte;
    19e6:	c0 91 87 0c 	lds	r28, 0x0C87
    19ea:	d0 91 88 0c 	lds	r29, 0x0C88
    19ee:	a1 e8       	ldi	r26, 0x81	; 129
    19f0:	bc e0       	ldi	r27, 0x0C	; 12
    19f2:	ed 91       	ld	r30, X+
    19f4:	fc 91       	ld	r31, X
    19f6:	11 97       	sbiw	r26, 0x01	; 1
    19f8:	bf 01       	movw	r22, r30
    19fa:	6f 5f       	subi	r22, 0xFF	; 255
    19fc:	7f 4f       	sbci	r23, 0xFF	; 255
    19fe:	6d 93       	st	X+, r22
    1a00:	7c 93       	st	X, r23
    1a02:	ec 0f       	add	r30, r28
    1a04:	fd 1f       	adc	r31, r29
    1a06:	80 83       	st	Z, r24
  if (txFifo.tail == txFifo.size)
    1a08:	46 17       	cp	r20, r22
    1a0a:	57 07       	cpc	r21, r23
    1a0c:	21 f4       	brne	.+8      	; 0x1a16 <HAL_UartWriteByte+0x4a>
    txFifo.tail = 0;
    1a0e:	10 92 82 0c 	sts	0x0C82, r1
    1a12:	10 92 81 0c 	sts	0x0C81, r1
  txFifo.bytes++;
    1a16:	2f 5f       	subi	r18, 0xFF	; 255
    1a18:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1a:	30 93 86 0c 	sts	0x0C86, r19
    1a1e:	20 93 85 0c 	sts	0x0C85, r18
}
    1a22:	df 91       	pop	r29
    1a24:	cf 91       	pop	r28
    1a26:	08 95       	ret

00001a28 <HAL_UartReadByte>:
uint8_t HAL_UartReadByte(void)
{
  uint8_t byte;

  PRAGMA(diag_suppress=Pa082);
  ATOMIC_SECTION_ENTER
    1a28:	6f b7       	in	r22, 0x3f	; 63
    1a2a:	f8 94       	cli
    byte = rxFifo.data[rxFifo.head++];
    1a2c:	20 91 2c 0c 	lds	r18, 0x0C2C
    1a30:	30 91 2d 0c 	lds	r19, 0x0C2D
    1a34:	e4 e2       	ldi	r30, 0x24	; 36
    1a36:	fc e0       	ldi	r31, 0x0C	; 12
    1a38:	80 81       	ld	r24, Z
    1a3a:	91 81       	ldd	r25, Z+1	; 0x01
    1a3c:	ac 01       	movw	r20, r24
    1a3e:	4f 5f       	subi	r20, 0xFF	; 255
    1a40:	5f 4f       	sbci	r21, 0xFF	; 255
    1a42:	51 83       	std	Z+1, r21	; 0x01
    1a44:	40 83       	st	Z, r20
    1a46:	d9 01       	movw	r26, r18
    1a48:	a8 0f       	add	r26, r24
    1a4a:	b9 1f       	adc	r27, r25
    1a4c:	8c 91       	ld	r24, X
    if (rxFifo.head == rxFifo.size)
    1a4e:	40 81       	ld	r20, Z
    1a50:	51 81       	ldd	r21, Z+1	; 0x01
    1a52:	20 91 28 0c 	lds	r18, 0x0C28
    1a56:	30 91 29 0c 	lds	r19, 0x0C29
    1a5a:	42 17       	cp	r20, r18
    1a5c:	53 07       	cpc	r21, r19
    1a5e:	21 f4       	brne	.+8      	; 0x1a68 <HAL_UartReadByte+0x40>
      rxFifo.head = 0;
    1a60:	10 92 25 0c 	sts	0x0C25, r1
    1a64:	10 92 24 0c 	sts	0x0C24, r1
    rxFifo.bytes--;
    1a68:	ea e2       	ldi	r30, 0x2A	; 42
    1a6a:	fc e0       	ldi	r31, 0x0C	; 12
    1a6c:	20 81       	ld	r18, Z
    1a6e:	31 81       	ldd	r19, Z+1	; 0x01
    1a70:	21 50       	subi	r18, 0x01	; 1
    1a72:	31 09       	sbc	r19, r1
    1a74:	31 83       	std	Z+1, r19	; 0x01
    1a76:	20 83       	st	Z, r18
  ATOMIC_SECTION_LEAVE
    1a78:	6f bf       	out	0x3f, r22	; 63
  PRAGMA(diag_default=Pa082);

  return byte;
}
    1a7a:	08 95       	ret

00001a7c <__vector_37>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
    1a7c:	1f 92       	push	r1
    1a7e:	0f 92       	push	r0
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	0f 92       	push	r0
    1a84:	11 24       	eor	r1, r1
    1a86:	0b b6       	in	r0, 0x3b	; 59
    1a88:	0f 92       	push	r0
    1a8a:	8f 93       	push	r24
    1a8c:	ef 93       	push	r30
    1a8e:	ff 93       	push	r31
  udrEmpty = true;
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	80 93 d2 0b 	sts	0x0BD2, r24
  UCSRxB &= ~(1 << UDRIE1);
    1a96:	e9 ec       	ldi	r30, 0xC9	; 201
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	8f 7d       	andi	r24, 0xDF	; 223
    1a9e:	80 83       	st	Z, r24
}
    1aa0:	ff 91       	pop	r31
    1aa2:	ef 91       	pop	r30
    1aa4:	8f 91       	pop	r24
    1aa6:	0f 90       	pop	r0
    1aa8:	0b be       	out	0x3b, r0	; 59
    1aaa:	0f 90       	pop	r0
    1aac:	0f be       	out	0x3f, r0	; 63
    1aae:	0f 90       	pop	r0
    1ab0:	1f 90       	pop	r1
    1ab2:	18 95       	reti

00001ab4 <__vector_36>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
    1ab4:	1f 92       	push	r1
    1ab6:	0f 92       	push	r0
    1ab8:	0f b6       	in	r0, 0x3f	; 63
    1aba:	0f 92       	push	r0
    1abc:	11 24       	eor	r1, r1
    1abe:	0b b6       	in	r0, 0x3b	; 59
    1ac0:	0f 92       	push	r0
    1ac2:	2f 93       	push	r18
    1ac4:	3f 93       	push	r19
    1ac6:	4f 93       	push	r20
    1ac8:	5f 93       	push	r21
    1aca:	6f 93       	push	r22
    1acc:	8f 93       	push	r24
    1ace:	9f 93       	push	r25
    1ad0:	af 93       	push	r26
    1ad2:	bf 93       	push	r27
    1ad4:	ef 93       	push	r30
    1ad6:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
    1ad8:	80 91 c8 00 	lds	r24, 0x00C8
  uint8_t byte = UDRx;
    1adc:	60 91 ce 00 	lds	r22, 0x00CE

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
    1ae0:	8c 71       	andi	r24, 0x1C	; 28
    1ae2:	99 f5       	brne	.+102    	; 0x1b4a <__vector_36+0x96>
  {
    if (rxFifo.bytes == rxFifo.size)
    1ae4:	20 91 2a 0c 	lds	r18, 0x0C2A
    1ae8:	30 91 2b 0c 	lds	r19, 0x0C2B
    1aec:	80 91 28 0c 	lds	r24, 0x0C28
    1af0:	90 91 29 0c 	lds	r25, 0x0C29
    1af4:	28 17       	cp	r18, r24
    1af6:	39 07       	cpc	r19, r25
    1af8:	41 f1       	breq	.+80     	; 0x1b4a <__vector_36+0x96>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
    1afa:	20 91 2c 0c 	lds	r18, 0x0C2C
    1afe:	30 91 2d 0c 	lds	r19, 0x0C2D
    1b02:	e6 e2       	ldi	r30, 0x26	; 38
    1b04:	fc e0       	ldi	r31, 0x0C	; 12
    1b06:	80 81       	ld	r24, Z
    1b08:	91 81       	ldd	r25, Z+1	; 0x01
    1b0a:	ac 01       	movw	r20, r24
    1b0c:	4f 5f       	subi	r20, 0xFF	; 255
    1b0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b10:	51 83       	std	Z+1, r21	; 0x01
    1b12:	40 83       	st	Z, r20
    1b14:	d9 01       	movw	r26, r18
    1b16:	a8 0f       	add	r26, r24
    1b18:	b9 1f       	adc	r27, r25
    1b1a:	6c 93       	st	X, r22
    if (rxFifo.tail == rxFifo.size)
    1b1c:	20 81       	ld	r18, Z
    1b1e:	31 81       	ldd	r19, Z+1	; 0x01
    1b20:	80 91 28 0c 	lds	r24, 0x0C28
    1b24:	90 91 29 0c 	lds	r25, 0x0C29
    1b28:	28 17       	cp	r18, r24
    1b2a:	39 07       	cpc	r19, r25
    1b2c:	21 f4       	brne	.+8      	; 0x1b36 <__vector_36+0x82>
      rxFifo.tail = 0;
    1b2e:	10 92 27 0c 	sts	0x0C27, r1
    1b32:	10 92 26 0c 	sts	0x0C26, r1
    rxFifo.bytes++;
    1b36:	ea e2       	ldi	r30, 0x2A	; 42
    1b38:	fc e0       	ldi	r31, 0x0C	; 12
    1b3a:	80 81       	ld	r24, Z
    1b3c:	91 81       	ldd	r25, Z+1	; 0x01
    1b3e:	01 96       	adiw	r24, 0x01	; 1
    1b40:	91 83       	std	Z+1, r25	; 0x01
    1b42:	80 83       	st	Z, r24

    newData = true;
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	80 93 d1 0b 	sts	0x0BD1, r24
  }

  PRAGMA(diag_default=Pa082);
}
    1b4a:	ff 91       	pop	r31
    1b4c:	ef 91       	pop	r30
    1b4e:	bf 91       	pop	r27
    1b50:	af 91       	pop	r26
    1b52:	9f 91       	pop	r25
    1b54:	8f 91       	pop	r24
    1b56:	6f 91       	pop	r22
    1b58:	5f 91       	pop	r21
    1b5a:	4f 91       	pop	r20
    1b5c:	3f 91       	pop	r19
    1b5e:	2f 91       	pop	r18
    1b60:	0f 90       	pop	r0
    1b62:	0b be       	out	0x3b, r0	; 59
    1b64:	0f 90       	pop	r0
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	0f 90       	pop	r0
    1b6a:	1f 90       	pop	r1
    1b6c:	18 95       	reti

00001b6e <HAL_UartTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartTaskHandler(void)
{
  if (txFifo.bytes && udrEmpty)
    1b6e:	80 91 85 0c 	lds	r24, 0x0C85
    1b72:	90 91 86 0c 	lds	r25, 0x0C86
    1b76:	00 97       	sbiw	r24, 0x00	; 0
    1b78:	89 f1       	breq	.+98     	; 0x1bdc <HAL_UartTaskHandler+0x6e>
    1b7a:	20 91 d2 0b 	lds	r18, 0x0BD2
    1b7e:	22 23       	and	r18, r18
    1b80:	69 f1       	breq	.+90     	; 0x1bdc <HAL_UartTaskHandler+0x6e>
  {
    uint8_t byte;

    byte = txFifo.data[txFifo.head++];
    1b82:	60 91 87 0c 	lds	r22, 0x0C87
    1b86:	70 91 88 0c 	lds	r23, 0x0C88
    1b8a:	ef e7       	ldi	r30, 0x7F	; 127
    1b8c:	fc e0       	ldi	r31, 0x0C	; 12
    1b8e:	40 81       	ld	r20, Z
    1b90:	51 81       	ldd	r21, Z+1	; 0x01
    1b92:	9a 01       	movw	r18, r20
    1b94:	2f 5f       	subi	r18, 0xFF	; 255
    1b96:	3f 4f       	sbci	r19, 0xFF	; 255
    1b98:	31 83       	std	Z+1, r19	; 0x01
    1b9a:	20 83       	st	Z, r18
    1b9c:	fb 01       	movw	r30, r22
    1b9e:	e4 0f       	add	r30, r20
    1ba0:	f5 1f       	adc	r31, r21
    1ba2:	60 81       	ld	r22, Z
    if (txFifo.head == txFifo.size)
    1ba4:	40 91 83 0c 	lds	r20, 0x0C83
    1ba8:	50 91 84 0c 	lds	r21, 0x0C84
    1bac:	24 17       	cp	r18, r20
    1bae:	35 07       	cpc	r19, r21
    1bb0:	21 f4       	brne	.+8      	; 0x1bba <HAL_UartTaskHandler+0x4c>
      txFifo.head = 0;
    1bb2:	10 92 80 0c 	sts	0x0C80, r1
    1bb6:	10 92 7f 0c 	sts	0x0C7F, r1
    txFifo.bytes--;
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	90 93 86 0c 	sts	0x0C86, r25
    1bc0:	80 93 85 0c 	sts	0x0C85, r24

    ATOMIC_SECTION_ENTER
    1bc4:	8f b7       	in	r24, 0x3f	; 63
    1bc6:	f8 94       	cli
      UDRx = byte;
    1bc8:	60 93 ce 00 	sts	0x00CE, r22
      UCSRxB |= (1 << UDRIE1);
    1bcc:	e9 ec       	ldi	r30, 0xC9	; 201
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	90 81       	ld	r25, Z
    1bd2:	90 62       	ori	r25, 0x20	; 32
    1bd4:	90 83       	st	Z, r25
      udrEmpty = false;
    1bd6:	10 92 d2 0b 	sts	0x0BD2, r1
    ATOMIC_SECTION_LEAVE
    1bda:	8f bf       	out	0x3f, r24	; 63

  {
    uint16_t bytes;
    bool new;

    ATOMIC_SECTION_ENTER
    1bdc:	3f b7       	in	r19, 0x3f	; 63
    1bde:	f8 94       	cli
      new = newData;
    1be0:	20 91 d1 0b 	lds	r18, 0x0BD1
      newData = false;
    1be4:	10 92 d1 0b 	sts	0x0BD1, r1
      bytes = rxFifo.bytes;
    1be8:	80 91 2a 0c 	lds	r24, 0x0C2A
    1bec:	90 91 2b 0c 	lds	r25, 0x0C2B
    ATOMIC_SECTION_LEAVE
    1bf0:	3f bf       	out	0x3f, r19	; 63

    if (new)
    1bf2:	21 11       	cpse	r18, r1
      HAL_UartBytesReceived(bytes);
    1bf4:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <HAL_UartBytesReceived>
    1bf8:	08 95       	ret

00001bfa <HAL_UartGetTxFifoBytes>:

//CPHT: Added HAL_UartGetTxFifoBytes to facilitate flushing
uint16_t HAL_UartGetTxFifoBytes(void)
{
	return txFifo.bytes;
}
    1bfa:	80 91 85 0c 	lds	r24, 0x0C85
    1bfe:	90 91 86 0c 	lds	r25, 0x0C86
    1c02:	08 95       	ret

00001c04 <HAL_UartGetRxFifoBytes>:
//CPHT: Added HAL_UartGetRxFifoBytes to facilitate flushing
uint16_t HAL_UartGetRxFifoBytes(void)
{
	return rxFifo.bytes;
    1c04:	80 91 2a 0c 	lds	r24, 0x0C2A
    1c08:	90 91 2b 0c 	lds	r25, 0x0C2B
}
    1c0c:	08 95       	ret

00001c0e <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
    1c0e:	14 be       	out	0x34, r1	; 52
  wdt_disable();
    1c10:	88 e1       	ldi	r24, 0x18	; 24
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	f8 94       	cli
    1c16:	80 93 60 00 	sts	0x0060, r24
    1c1a:	10 92 60 00 	sts	0x0060, r1
    1c1e:	0f be       	out	0x3f, r0	; 63

  CLKPR = 1 << CLKPCE;
    1c20:	e1 e6       	ldi	r30, 0x61	; 97
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 e8       	ldi	r24, 0x80	; 128
    1c26:	80 83       	st	Z, r24
  CLKPR = 0;
    1c28:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
    1c2a:	78 94       	sei

  HAL_TimerInit();
    1c2c:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <HAL_TimerInit>
    1c30:	08 95       	ret

00001c32 <HAL_Delay>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Delay(uint8_t us)
{
  HAL_TimerDelay(us);
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <HAL_TimerDelay>
    1c38:	08 95       	ret

00001c3a <HAL_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_TimerInit(void)
{
  halTimerIrqCount = 0;
    1c3a:	10 92 b1 0c 	sts	0x0CB1, r1

  OCR4A = ((F_CPU / 1000ul) / TIMER_PRESCALER) * HAL_TIMER_INTERVAL;
    1c3e:	80 e1       	ldi	r24, 0x10	; 16
    1c40:	97 e2       	ldi	r25, 0x27	; 39
    1c42:	90 93 a9 00 	sts	0x00A9, r25
    1c46:	80 93 a8 00 	sts	0x00A8, r24
  TCCR4B = (1 << WGM12);              // CTC mode
    1c4a:	e1 ea       	ldi	r30, 0xA1	; 161
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	88 e0       	ldi	r24, 0x08	; 8
    1c50:	80 83       	st	Z, r24
  TCCR4B |= (1 << CS11);              // Prescaler 8
    1c52:	80 81       	ld	r24, Z
    1c54:	82 60       	ori	r24, 0x02	; 2
    1c56:	80 83       	st	Z, r24
  TIMSK4 |= (1 << OCIE4A);            // Enable TC4 interrupt
    1c58:	e2 e7       	ldi	r30, 0x72	; 114
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	82 60       	ori	r24, 0x02	; 2
    1c60:	80 83       	st	Z, r24
    1c62:	08 95       	ret

00001c64 <HAL_TimerDelay>:
*****************************************************************************/
void HAL_TimerDelay(uint16_t us)
{
  PRAGMA(diag_suppress=Pa082);

  OCR4B = TCNT4 + us;
    1c64:	20 91 a4 00 	lds	r18, 0x00A4
    1c68:	30 91 a5 00 	lds	r19, 0x00A5
    1c6c:	82 0f       	add	r24, r18
    1c6e:	93 1f       	adc	r25, r19
    1c70:	ea ea       	ldi	r30, 0xAA	; 170
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	91 83       	std	Z+1, r25	; 0x01
    1c76:	80 83       	st	Z, r24
  if (OCR4B > OCR4A)
    1c78:	20 81       	ld	r18, Z
    1c7a:	31 81       	ldd	r19, Z+1	; 0x01
    1c7c:	80 91 a8 00 	lds	r24, 0x00A8
    1c80:	90 91 a9 00 	lds	r25, 0x00A9
    1c84:	82 17       	cp	r24, r18
    1c86:	93 07       	cpc	r25, r19
    1c88:	50 f4       	brcc	.+20     	; 0x1c9e <HAL_TimerDelay+0x3a>
    OCR4B -= OCR4A;
    1c8a:	80 81       	ld	r24, Z
    1c8c:	91 81       	ldd	r25, Z+1	; 0x01
    1c8e:	20 91 a8 00 	lds	r18, 0x00A8
    1c92:	30 91 a9 00 	lds	r19, 0x00A9
    1c96:	82 1b       	sub	r24, r18
    1c98:	93 0b       	sbc	r25, r19
    1c9a:	91 83       	std	Z+1, r25	; 0x01
    1c9c:	80 83       	st	Z, r24

  TIFR4 = (1 << OCF4B);
    1c9e:	84 e0       	ldi	r24, 0x04	; 4
    1ca0:	89 bb       	out	0x19, r24	; 25
  while (0 == (TIFR4 & (1 << OCF4B)));
    1ca2:	ca 9b       	sbis	0x19, 2	; 25
    1ca4:	fe cf       	rjmp	.-4      	; 0x1ca2 <HAL_TimerDelay+0x3e>

  PRAGMA(diag_default=Pa082);
}
    1ca6:	08 95       	ret

00001ca8 <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
    1ca8:	1f 92       	push	r1
    1caa:	0f 92       	push	r0
    1cac:	0f b6       	in	r0, 0x3f	; 63
    1cae:	0f 92       	push	r0
    1cb0:	11 24       	eor	r1, r1
    1cb2:	8f 93       	push	r24
  halTimerIrqCount++;
    1cb4:	80 91 b1 0c 	lds	r24, 0x0CB1
    1cb8:	8f 5f       	subi	r24, 0xFF	; 255
    1cba:	80 93 b1 0c 	sts	0x0CB1, r24
}
    1cbe:	8f 91       	pop	r24
    1cc0:	0f 90       	pop	r0
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	0f 90       	pop	r0
    1cc6:	1f 90       	pop	r1
    1cc8:	18 95       	reti

00001cca <appDataConf>:
void startTimeoutTimer();
SYS_Timer_t timeoutTimer;


static void appDataConf(NWK_DataReq_t *req)
{
    1cca:	08 95       	ret

00001ccc <appDataInd>:

}
static bool appDataInd(NWK_DataInd_t *ind)
{
	return true;
}
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	08 95       	ret

00001cd0 <HAL_UartBytesReceived>:
{

}

void HAL_UartBytesReceived(uint16_t bytes)
{
    1cd0:	08 95       	ret

00001cd2 <startTimeoutTimer>:
	startTimeoutTimer();
}

void startTimeoutTimer()
{
	timeoutTimer.interval = 250;
    1cd2:	8a ef       	ldi	r24, 0xFA	; 250
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	a0 e0       	ldi	r26, 0x00	; 0
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	80 93 b8 0c 	sts	0x0CB8, r24
    1cde:	90 93 b9 0c 	sts	0x0CB9, r25
    1ce2:	a0 93 ba 0c 	sts	0x0CBA, r26
    1ce6:	b0 93 bb 0c 	sts	0x0CBB, r27
	timeoutTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1cea:	10 92 bc 0c 	sts	0x0CBC, r1
	timeoutTimer.handler = timeoutTimerHandler;
    1cee:	82 e8       	ldi	r24, 0x82	; 130
    1cf0:	9e e0       	ldi	r25, 0x0E	; 14
    1cf2:	90 93 be 0c 	sts	0x0CBE, r25
    1cf6:	80 93 bd 0c 	sts	0x0CBD, r24
	SYS_TimerStart(&timeoutTimer);
    1cfa:	82 eb       	ldi	r24, 0xB2	; 178
    1cfc:	9c e0       	ldi	r25, 0x0C	; 12
    1cfe:	0e 94 a0 01 	call	0x340	; 0x340 <SYS_TimerStart>
    1d02:	08 95       	ret

00001d04 <timeoutTimerHandler>:

}

void timeoutTimerHandler(SYS_Timer_t *timer)
{
	if (!NWK_Busy())
    1d04:	0e 94 a0 03 	call	0x740	; 0x740 <NWK_Busy>
    1d08:	81 11       	cpse	r24, r1
    1d0a:	29 c0       	rjmp	.+82     	; 0x1d5e <timeoutTimerHandler+0x5a>
		{
			frame[0] = 0x06;
    1d0c:	ef eb       	ldi	r30, 0xBF	; 191
    1d0e:	fc e0       	ldi	r31, 0x0C	; 12
    1d10:	86 e0       	ldi	r24, 0x06	; 6
    1d12:	80 83       	st	Z, r24
			frame[1] = 0xBB;
    1d14:	8b eb       	ldi	r24, 0xBB	; 187
    1d16:	80 93 c0 0c 	sts	0x0CC0, r24
			frame[2] = 0xBB;
    1d1a:	80 93 c1 0c 	sts	0x0CC1, r24
			frame[3] = 0xBB;
    1d1e:	80 93 c2 0c 	sts	0x0CC2, r24
			frame[4] = 0xBB;
    1d22:	80 93 c3 0c 	sts	0x0CC3, r24

			nwkDataReq.dstAddr = 0x389C;
    1d26:	8c e9       	ldi	r24, 0x9C	; 156
    1d28:	98 e3       	ldi	r25, 0x38	; 56
    1d2a:	90 93 ca 0c 	sts	0x0CCA, r25
    1d2e:	80 93 c9 0c 	sts	0x0CC9, r24
			nwkDataReq.dstEndpoint = 1;
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	80 93 cb 0c 	sts	0x0CCB, r24
			nwkDataReq.srcEndpoint = 1;
    1d38:	80 93 cc 0c 	sts	0x0CCC, r24
			nwkDataReq.size = sizeof(frame);
    1d3c:	85 e0       	ldi	r24, 0x05	; 5
    1d3e:	80 93 d0 0c 	sts	0x0CD0, r24
			nwkDataReq.data = frame;
    1d42:	f0 93 cf 0c 	sts	0x0CCF, r31
    1d46:	e0 93 ce 0c 	sts	0x0CCE, r30
			nwkDataReq.confirm = appDataConf;
    1d4a:	85 e6       	ldi	r24, 0x65	; 101
    1d4c:	9e e0       	ldi	r25, 0x0E	; 14
    1d4e:	90 93 d2 0c 	sts	0x0CD2, r25
    1d52:	80 93 d1 0c 	sts	0x0CD1, r24

			NWK_DataReq(&nwkDataReq);
    1d56:	84 ec       	ldi	r24, 0xC4	; 196
    1d58:	9c e0       	ldi	r25, 0x0C	; 12
    1d5a:	0e 94 1d 04 	call	0x83a	; 0x83a <NWK_DataReq>
		}
	startTimeoutTimer();
    1d5e:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <startTimeoutTimer>
    1d62:	08 95       	ret

00001d64 <init_nwk>:
{
	return true;
}
void init_nwk()
{
	NWK_SetAddr(0x0000);
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	0e 94 89 03 	call	0x712	; 0x712 <NWK_SetAddr>
	NWK_SetPanId(0x1973);
    1d6c:	83 e7       	ldi	r24, 0x73	; 115
    1d6e:	99 e1       	ldi	r25, 0x19	; 25
    1d70:	0e 94 90 03 	call	0x720	; 0x720 <NWK_SetPanId>
	PHY_SetChannel(0x16);
    1d74:	86 e1       	ldi	r24, 0x16	; 22
    1d76:	0e 94 72 02 	call	0x4e4	; 0x4e4 <PHY_SetChannel>
	PHY_SetTxPower(0);
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	0e 94 a5 02 	call	0x54a	; 0x54a <PHY_SetTxPower>
	PHY_SetRxState(true);
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	0e 94 6d 02 	call	0x4da	; 0x4da <PHY_SetRxState>
	NWK_OpenEndpoint(1, appDataInd);
    1d86:	66 e6       	ldi	r22, 0x66	; 102
    1d88:	7e e0       	ldi	r23, 0x0E	; 14
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	0e 94 97 03 	call	0x72e	; 0x72e <NWK_OpenEndpoint>
    1d90:	08 95       	ret

00001d92 <main>:
}

int main(void)
{
	SYS_Init();
    1d92:	0e 94 cd 00 	call	0x19a	; 0x19a <SYS_Init>
	HAL_UartInit(38400);
    1d96:	60 e0       	ldi	r22, 0x00	; 0
    1d98:	76 e9       	ldi	r23, 0x96	; 150
    1d9a:	80 e0       	ldi	r24, 0x00	; 0
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	0e 94 82 0c 	call	0x1904	; 0x1904 <HAL_UartInit>
  HAL_GPIO_PIN(LED0, B, 4);
  HAL_GPIO_PIN(LED1, B, 5); // Not on the board
  HAL_GPIO_PIN(LED2, B, 6); // Not on the board

#elif defined(PLATFORM_BITSTORM_ZB_B)
  HAL_GPIO_PIN(LED0, D, 6);
    1da2:	56 9a       	sbi	0x0a, 6	; 10
    1da4:	5e 9a       	sbi	0x0b, 6	; 11
  HAL_GPIO_PIN(LED1, G, 2);
    1da6:	9a 9a       	sbi	0x13, 2	; 19
    1da8:	a2 9a       	sbi	0x14, 2	; 20
  HAL_GPIO_PIN(LED2, E, 2);
    1daa:	6a 9a       	sbi	0x0d, 2	; 13
    1dac:	72 9a       	sbi	0x0e, 2	; 14
  HAL_GPIO_PIN(LED0, B, 4);
  HAL_GPIO_PIN(LED1, B, 5); // Not on the board
  HAL_GPIO_PIN(LED2, B, 6); // Not on the board

#elif defined(PLATFORM_BITSTORM_ZB_B)
  HAL_GPIO_PIN(LED0, D, 6);
    1dae:	5e 9a       	sbi	0x0b, 6	; 11
	HAL_LedInit();
	HAL_LedOff(0);

	init_nwk();
    1db0:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <init_nwk>
	startTimeoutTimer();
    1db4:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <startTimeoutTimer>
	while (1)
	{
		SYS_TaskHandler();
    1db8:	0e 94 d6 00 	call	0x1ac	; 0x1ac <SYS_TaskHandler>
		HAL_UartTaskHandler();
    1dbc:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <HAL_UartTaskHandler>
    1dc0:	fb cf       	rjmp	.-10     	; 0x1db8 <main+0x26>

00001dc2 <__udivmodsi4>:
    1dc2:	a1 e2       	ldi	r26, 0x21	; 33
    1dc4:	1a 2e       	mov	r1, r26
    1dc6:	aa 1b       	sub	r26, r26
    1dc8:	bb 1b       	sub	r27, r27
    1dca:	fd 01       	movw	r30, r26
    1dcc:	0d c0       	rjmp	.+26     	; 0x1de8 <__udivmodsi4_ep>

00001dce <__udivmodsi4_loop>:
    1dce:	aa 1f       	adc	r26, r26
    1dd0:	bb 1f       	adc	r27, r27
    1dd2:	ee 1f       	adc	r30, r30
    1dd4:	ff 1f       	adc	r31, r31
    1dd6:	a2 17       	cp	r26, r18
    1dd8:	b3 07       	cpc	r27, r19
    1dda:	e4 07       	cpc	r30, r20
    1ddc:	f5 07       	cpc	r31, r21
    1dde:	20 f0       	brcs	.+8      	; 0x1de8 <__udivmodsi4_ep>
    1de0:	a2 1b       	sub	r26, r18
    1de2:	b3 0b       	sbc	r27, r19
    1de4:	e4 0b       	sbc	r30, r20
    1de6:	f5 0b       	sbc	r31, r21

00001de8 <__udivmodsi4_ep>:
    1de8:	66 1f       	adc	r22, r22
    1dea:	77 1f       	adc	r23, r23
    1dec:	88 1f       	adc	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	1a 94       	dec	r1
    1df2:	69 f7       	brne	.-38     	; 0x1dce <__udivmodsi4_loop>
    1df4:	60 95       	com	r22
    1df6:	70 95       	com	r23
    1df8:	80 95       	com	r24
    1dfa:	90 95       	com	r25
    1dfc:	9b 01       	movw	r18, r22
    1dfe:	ac 01       	movw	r20, r24
    1e00:	bd 01       	movw	r22, r26
    1e02:	cf 01       	movw	r24, r30
    1e04:	08 95       	ret

00001e06 <do_rand>:
    1e06:	8f 92       	push	r8
    1e08:	9f 92       	push	r9
    1e0a:	af 92       	push	r10
    1e0c:	bf 92       	push	r11
    1e0e:	cf 92       	push	r12
    1e10:	df 92       	push	r13
    1e12:	ef 92       	push	r14
    1e14:	ff 92       	push	r15
    1e16:	cf 93       	push	r28
    1e18:	df 93       	push	r29
    1e1a:	ec 01       	movw	r28, r24
    1e1c:	68 81       	ld	r22, Y
    1e1e:	79 81       	ldd	r23, Y+1	; 0x01
    1e20:	8a 81       	ldd	r24, Y+2	; 0x02
    1e22:	9b 81       	ldd	r25, Y+3	; 0x03
    1e24:	61 15       	cp	r22, r1
    1e26:	71 05       	cpc	r23, r1
    1e28:	81 05       	cpc	r24, r1
    1e2a:	91 05       	cpc	r25, r1
    1e2c:	21 f4       	brne	.+8      	; 0x1e36 <do_rand+0x30>
    1e2e:	64 e2       	ldi	r22, 0x24	; 36
    1e30:	79 ed       	ldi	r23, 0xD9	; 217
    1e32:	8b e5       	ldi	r24, 0x5B	; 91
    1e34:	97 e0       	ldi	r25, 0x07	; 7
    1e36:	2d e1       	ldi	r18, 0x1D	; 29
    1e38:	33 ef       	ldi	r19, 0xF3	; 243
    1e3a:	41 e0       	ldi	r20, 0x01	; 1
    1e3c:	50 e0       	ldi	r21, 0x00	; 0
    1e3e:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__divmodsi4>
    1e42:	49 01       	movw	r8, r18
    1e44:	5a 01       	movw	r10, r20
    1e46:	9b 01       	movw	r18, r22
    1e48:	ac 01       	movw	r20, r24
    1e4a:	a7 ea       	ldi	r26, 0xA7	; 167
    1e4c:	b1 e4       	ldi	r27, 0x41	; 65
    1e4e:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__muluhisi3>
    1e52:	6b 01       	movw	r12, r22
    1e54:	7c 01       	movw	r14, r24
    1e56:	ac ee       	ldi	r26, 0xEC	; 236
    1e58:	b4 ef       	ldi	r27, 0xF4	; 244
    1e5a:	a5 01       	movw	r20, r10
    1e5c:	94 01       	movw	r18, r8
    1e5e:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulohisi3>
    1e62:	c6 0e       	add	r12, r22
    1e64:	d7 1e       	adc	r13, r23
    1e66:	e8 1e       	adc	r14, r24
    1e68:	f9 1e       	adc	r15, r25
    1e6a:	f7 fe       	sbrs	r15, 7
    1e6c:	06 c0       	rjmp	.+12     	; 0x1e7a <do_rand+0x74>
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	c8 1a       	sub	r12, r24
    1e72:	d1 08       	sbc	r13, r1
    1e74:	e1 08       	sbc	r14, r1
    1e76:	80 e8       	ldi	r24, 0x80	; 128
    1e78:	f8 0a       	sbc	r15, r24
    1e7a:	c8 82       	st	Y, r12
    1e7c:	d9 82       	std	Y+1, r13	; 0x01
    1e7e:	ea 82       	std	Y+2, r14	; 0x02
    1e80:	fb 82       	std	Y+3, r15	; 0x03
    1e82:	c6 01       	movw	r24, r12
    1e84:	9f 77       	andi	r25, 0x7F	; 127
    1e86:	df 91       	pop	r29
    1e88:	cf 91       	pop	r28
    1e8a:	ff 90       	pop	r15
    1e8c:	ef 90       	pop	r14
    1e8e:	df 90       	pop	r13
    1e90:	cf 90       	pop	r12
    1e92:	bf 90       	pop	r11
    1e94:	af 90       	pop	r10
    1e96:	9f 90       	pop	r9
    1e98:	8f 90       	pop	r8
    1e9a:	08 95       	ret

00001e9c <rand_r>:
    1e9c:	0c 94 03 0f 	jmp	0x1e06	; 0x1e06 <do_rand>

00001ea0 <rand>:
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	92 e0       	ldi	r25, 0x02	; 2
    1ea4:	0c 94 03 0f 	jmp	0x1e06	; 0x1e06 <do_rand>

00001ea8 <srand>:
    1ea8:	a0 e0       	ldi	r26, 0x00	; 0
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	80 93 00 02 	sts	0x0200, r24
    1eb0:	90 93 01 02 	sts	0x0201, r25
    1eb4:	a0 93 02 02 	sts	0x0202, r26
    1eb8:	b0 93 03 02 	sts	0x0203, r27
    1ebc:	08 95       	ret

00001ebe <memcpy>:
    1ebe:	fb 01       	movw	r30, r22
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	02 c0       	rjmp	.+4      	; 0x1ec8 <memcpy+0xa>
    1ec4:	01 90       	ld	r0, Z+
    1ec6:	0d 92       	st	X+, r0
    1ec8:	41 50       	subi	r20, 0x01	; 1
    1eca:	50 40       	sbci	r21, 0x00	; 0
    1ecc:	d8 f7       	brcc	.-10     	; 0x1ec4 <memcpy+0x6>
    1ece:	08 95       	ret

00001ed0 <__divmodsi4>:
    1ed0:	05 2e       	mov	r0, r21
    1ed2:	97 fb       	bst	r25, 7
    1ed4:	1e f4       	brtc	.+6      	; 0x1edc <__divmodsi4+0xc>
    1ed6:	00 94       	com	r0
    1ed8:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__negsi2>
    1edc:	57 fd       	sbrc	r21, 7
    1ede:	07 d0       	rcall	.+14     	; 0x1eee <__divmodsi4_neg2>
    1ee0:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <__udivmodsi4>
    1ee4:	07 fc       	sbrc	r0, 7
    1ee6:	03 d0       	rcall	.+6      	; 0x1eee <__divmodsi4_neg2>
    1ee8:	4e f4       	brtc	.+18     	; 0x1efc <__divmodsi4_exit>
    1eea:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <__negsi2>

00001eee <__divmodsi4_neg2>:
    1eee:	50 95       	com	r21
    1ef0:	40 95       	com	r20
    1ef2:	30 95       	com	r19
    1ef4:	21 95       	neg	r18
    1ef6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef8:	4f 4f       	sbci	r20, 0xFF	; 255
    1efa:	5f 4f       	sbci	r21, 0xFF	; 255

00001efc <__divmodsi4_exit>:
    1efc:	08 95       	ret

00001efe <__negsi2>:
    1efe:	90 95       	com	r25
    1f00:	80 95       	com	r24
    1f02:	70 95       	com	r23
    1f04:	61 95       	neg	r22
    1f06:	7f 4f       	sbci	r23, 0xFF	; 255
    1f08:	8f 4f       	sbci	r24, 0xFF	; 255
    1f0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f0c:	08 95       	ret

00001f0e <__muluhisi3>:
    1f0e:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <__umulhisi3>
    1f12:	a5 9f       	mul	r26, r21
    1f14:	90 0d       	add	r25, r0
    1f16:	b4 9f       	mul	r27, r20
    1f18:	90 0d       	add	r25, r0
    1f1a:	a4 9f       	mul	r26, r20
    1f1c:	80 0d       	add	r24, r0
    1f1e:	91 1d       	adc	r25, r1
    1f20:	11 24       	eor	r1, r1
    1f22:	08 95       	ret

00001f24 <__mulshisi3>:
    1f24:	b7 ff       	sbrs	r27, 7
    1f26:	0c 94 87 0f 	jmp	0x1f0e	; 0x1f0e <__muluhisi3>

00001f2a <__mulohisi3>:
    1f2a:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__muluhisi3>
    1f2e:	82 1b       	sub	r24, r18
    1f30:	93 0b       	sbc	r25, r19
    1f32:	08 95       	ret

00001f34 <__umulhisi3>:
    1f34:	a2 9f       	mul	r26, r18
    1f36:	b0 01       	movw	r22, r0
    1f38:	b3 9f       	mul	r27, r19
    1f3a:	c0 01       	movw	r24, r0
    1f3c:	a3 9f       	mul	r26, r19
    1f3e:	70 0d       	add	r23, r0
    1f40:	81 1d       	adc	r24, r1
    1f42:	11 24       	eor	r1, r1
    1f44:	91 1d       	adc	r25, r1
    1f46:	b2 9f       	mul	r27, r18
    1f48:	70 0d       	add	r23, r0
    1f4a:	81 1d       	adc	r24, r1
    1f4c:	11 24       	eor	r1, r1
    1f4e:	91 1d       	adc	r25, r1
    1f50:	08 95       	ret

00001f52 <_exit>:
    1f52:	f8 94       	cli

00001f54 <__stop_program>:
    1f54:	ff cf       	rjmp	.-2      	; 0x1f54 <__stop_program>
